{
	"classes": [
		{
			"internalName": "Object",
			"displayName": "Object",
			"description": "The base class of every object.",
			"properties": [
				{
					"internalName": "hash",
					"displayName": "Hash",
					"description": "A Hash of this object. This is a value that nearly uniquely identifies this object.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "internalName",
					"displayName": "internalName",
					"description": "The unreal engine internal name of this object.",
					"type":
					{
						"type": "String"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "internalPath",
					"displayName": "internalPath",
					"description": "The unreal engine internal path name of this object.",
					"type":
					{
						"type": "String"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "hash",
					"displayName": "Hash",
					"description": "A Hash of this object. This is a value that nearly uniquely identifies this object.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				},
				{
					"internalName": "internalName",
					"displayName": "internalName",
					"description": "The unreal engine internal name of this object.",
					"type":
					{
						"type": "String"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				},
				{
					"internalName": "internalPath",
					"displayName": "internalPath",
					"description": "The unreal engine internal path name of this object.",
					"type":
					{
						"type": "String"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				}
			],
			"functions": [
				{
					"internalName": "getHash",
					"displayName": "Get Hash",
					"description": "Returns the hash of this class. This is a value that nearly uniquely identifies this object.",
					"parameters": [
						{
							"internalName": "hash",
							"displayName": "Hash",
							"description": "The hash of this class.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getType",
					"displayName": "Get Type",
					"description": "Returns the type (aka class) of this class instance.",
					"parameters": [
						{
							"internalName": "type",
							"displayName": "Type",
							"description": "The type of this class instance",
							"type":
							{
								"type": "Object",
								"subclass": "Class"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getHash",
					"displayName": "Get Hash",
					"description": "Returns the hash of this class. This is a value that nearly uniquely identifies this object.",
					"parameters": [
						{
							"internalName": "hash",
							"displayName": "Hash",
							"description": "The hash of this class.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": false,
					"Flag_ClassFunc": true,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getType",
					"displayName": "Get Type",
					"description": "Returns the type (aka class) of this class instance.",
					"parameters": [
						{
							"internalName": "type",
							"displayName": "Type",
							"description": "The type of this class instance",
							"type":
							{
								"type": "Object",
								"subclass": "Class"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": false,
					"Flag_ClassFunc": true,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Actor",
			"displayName": "Actor",
			"description": "This is the base class of all things that can exist within the world by them self.",
			"parent": "Object",
			"properties": [
				{
					"internalName": "location",
					"displayName": "Location",
					"description": "The location of the actor in the world.",
					"type":
					{
						"type": "Struct",
						"inner": "Vector"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "scale",
					"displayName": "Scale",
					"description": "The scale of the actor in the world.",
					"type":
					{
						"type": "Struct",
						"inner": "Vector"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "rotation",
					"displayName": "Rotation",
					"description": "The rotation of the actor in the world.",
					"type":
					{
						"type": "Struct",
						"inner": "Rotator"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getPowerConnectors",
					"displayName": "Get Power Connectors",
					"description": "Returns a list of power connectors this actor might have.",
					"parameters": [
						{
							"internalName": "connectors",
							"displayName": "Connectors",
							"description": "The power connectors this actor has.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Trace",
									"subclass": "PowerConnection"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getFactoryConnectors",
					"displayName": "Get Factory Connectors",
					"description": "Returns a list of factory connectors this actor might have.",
					"parameters": [
						{
							"internalName": "connectors",
							"displayName": "Connectors",
							"description": "The factory connectors this actor has.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Trace",
									"subclass": "FactoryConnection"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getPipeConnectors",
					"displayName": "Get Pipe Connectors",
					"description": "Returns a list of pipe connectors this actor might have.",
					"parameters": [
						{
							"internalName": "connectors",
							"displayName": "Connectors",
							"description": "The factory connectors this actor has.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Trace",
									"subclass": "PipeConnection"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getInventories",
					"displayName": "Get Inventories",
					"description": "Returns a list of inventories this actor might have.",
					"parameters": [
						{
							"internalName": "inventories",
							"displayName": "Inventories",
							"description": "The inventories this actor has.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Trace",
									"subclass": "Inventory"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getNetworkConnectors",
					"displayName": "Get Network Connectors",
					"description": "Returns the name of network connectors this actor might have.",
					"parameters": [
						{
							"internalName": "connectors",
							"displayName": "Connectors",
							"description": "The factory connectors this actor has.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Trace",
									"subclass": "ActorComponent"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "FGBuildable",
			"displayName": "FGBuildable",
			"description": "",
			"parent": "Actor",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "BP_Test_C",
			"displayName": "Test",
			"description": "A Test Object",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Blueprint_C",
			"displayName": "Factory Blueprint",
			"description": "See Display Name",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorCeilingAttachment_C",
			"displayName": "Conveyor Ceiling Mount",
			"description": "Can be attached to ceilings and other ceiling mounts.\r\nUseful to route conveyor belts in a more controlled manner and over long distances.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorPoleWall_C",
			"displayName": "Conveyor Wall Mount",
			"description": "Can be attached to walls.\r\nUseful to route conveyor belts in a more controlled manner and over long distances.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_HyperTubeWallHole_C",
			"displayName": "Hypertube Wall Hole",
			"description": "Can be attached to walls to allow Hypertubes to pass through them.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_HyperTubeWallSupport_C",
			"displayName": "Hypertube Wall Support",
			"description": "Can be attached to walls. \r\nSupports for Hypertubes to allow for longer distances.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipelineSupportWall_C",
			"displayName": "Pipeline Wall Support",
			"description": "Can be attached to walls.\r\nUsed to connect Pipelines over longer distances.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipelineSupportWallHole_C",
			"displayName": "Pipeline Wall Hole",
			"description": "Can be attached to walls, allowing Pipelines to pass through them.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_TetrominoGame_Computer_C",
			"displayName": "Build_TetrominoGame_Computer_C",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_WorkBench_C",
			"displayName": "Craft Bench",
			"description": "Allows you to manually craft a large range of different parts. \r\nThese parts can then be used in construction of different factory buildings, vehicles and equipment.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_WorkBenchIntegrated_C",
			"displayName": "Craft Bench",
			"description": "The Craft Bench allows you to manually produce parts to use in constructing buildings.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Workshop_C",
			"displayName": "Equipment Workshop",
			"description": "Used to manually craft equipment.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_WreathDecor_C",
			"displayName": "FICSMAS Wreath",
			"description": "Can be attached to walls. Pretty.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_XmasTree_C",
			"displayName": "Giant FICSMAS Tree",
			"description": "This special delivery gigantic FICSMAS Tree is decorated by progressing the FICSMAS Holiday Event MAM Tree.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "CircuitBridge",
			"displayName": "Circuit Bridge",
			"description": "A building that can connect two circuit networks together.",
			"parent": "FGBuildable",
			"properties": [
				{
					"internalName": "isBridgeConnected",
					"displayName": "Is Bridge Connected",
					"description": "True if the bridge is connected to two circuits.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isBridgeActive",
					"displayName": "Is Bridge Active",
					"description": "True if the two circuits are connected to each other and act as one entity.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "CircuitSwitch",
			"displayName": "Circuit Switch",
			"description": "A circuit bridge that can be activated and deactivate by the player.",
			"parent": "CircuitBridge",
			"properties": [
				{
					"internalName": "isSwitchOn",
					"displayName": "Is Switch On",
					"description": "True if the two circuits are connected to each other and act as one entity.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PowerSwitch_C",
			"displayName": "Power Switch",
			"description": "Can be switched ON/OFF to enable/disable the connection between two Power Grids.\r\n\r\nNote the location of the A and B connection.",
			"parent": "CircuitSwitch",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePriorityPowerSwitch",
			"displayName": "FGBuildablePriorityPowerSwitch",
			"description": "",
			"parent": "CircuitSwitch",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableControlPanelHost",
			"displayName": "FGBuildableControlPanelHost",
			"description": "",
			"parent": "CircuitBridge",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "LightsControlPanel",
			"displayName": "Light Source",
			"description": "A control panel to configure multiple lights at once.",
			"parent": "FGBuildableControlPanelHost",
			"properties": [
				{
					"internalName": "isLightEnabled",
					"displayName": "Is Light Enabled",
					"description": "True if the lights should be enabled",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isTimeOfDayAware",
					"displayName": "Is Time of Day Aware",
					"description": "True if the lights should automatically turn on and off depending on the time of the day.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "intensity",
					"displayName": "Intensity",
					"description": "The intensity of the lights.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "colorSlot",
					"displayName": "Color Slot",
					"description": "The color slot the lights should use.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "setColorFromSlot",
					"displayName": "Set Color from Slot",
					"description": "Allows to update the light color that is referenced by the given slot.",
					"parameters": [
						{
							"internalName": "slot",
							"displayName": "Slot",
							"description": "The slot you want to update the referencing color for.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "color",
							"displayName": "Color",
							"description": "The color this slot should now reference.",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Build_LightsControlPanel_C",
			"displayName": "Lights Control Panel",
			"description": "Useful for sectioning and modifying many lights at once.\r\n\r\nControls all Lights connected to the Power Grid attached to the 'Light Power Connector'.\r\n(Other Control Panels and Power Switches interrupt the connection.)",
			"parent": "LightsControlPanel",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "ComputerCase",
			"displayName": "Computer Case",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": [
				{
					"internalName": "FileSystemUpdate",
					"displayName": "File System Update",
					"description": "Triggers when something in the filesystem changes.",
					"parameters": [
						{
							"internalName": "type",
							"displayName": "Type",
							"description": "The type of the change.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "from",
							"displayName": "From",
							"description": "The file path to the FS node that has changed.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "to",
							"displayName": "To",
							"description": "The new file path of the node if it has changed.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "Computer_C",
			"displayName": "Computer Case",
			"description": "The FICSIT-Network computer case is the most important thing you will know of. This case already holds the essentials of a computer for you. Like a network connector, keyboard, mouse and screen. But most important of all, it already has a motherboard were you can place and configure the computer just like you want.",
			"parent": "ComputerCase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Factory",
			"displayName": "Factory",
			"description": "The base class of most machines you can build.",
			"parent": "FGBuildable",
			"properties": [
				{
					"internalName": "progress",
					"displayName": "Progress",
					"description": "The current production progress of the current production cycle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "powerConsumProducing",
					"displayName": "Producing Power Consumption",
					"description": "The power consumption when producing.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "productivity",
					"displayName": "Productivity",
					"description": "The productivity of this factory.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "cycleTime",
					"displayName": "Cycle Time",
					"description": "The time that passes till one production cycle is finished.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "maxPotential",
					"displayName": "Max Potential",
					"description": "The maximum potential this factory can be set to.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "minPotential",
					"displayName": "Min Potential",
					"description": "The minimum potential this factory needs to be set to.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "standby",
					"displayName": "Standby",
					"description": "True if the factory is in standby.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "potential",
					"displayName": "Potential",
					"description": "The potential this factory is currently set to. (the overclock value)\n 0 = 0%, 1 = 100%",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_CandyCaneDecor_C",
			"displayName": "Candy Cane",
			"description": "A giant, delicious Candy Cane.\r\n\r\n*Warning: It is not actually delicious... or edible, for that matter.",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_JumpPad_C",
			"displayName": "Old Jump Pad",
			"description": "Propels you upwards through the air.\r\nMake sure you land softly.",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_JumpPadTilted_C",
			"displayName": "Old Tilted Jump Pad",
			"description": "Propels you forwards through the air.\r\nMake sure you land softly.",
			"parent": "Build_JumpPad_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_LandingPad_C",
			"displayName": "U-Jelly Landing Pad",
			"description": "Generates a speed dampening jelly.\r\nGuarantees a safe landing.",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_LookoutTower_C",
			"displayName": "Lookout Tower",
			"description": "Provides a good overview which makes factory construction easier.",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Snowman_C",
			"displayName": "Snowman",
			"description": "Do you wanna build it?\r\nYou will finally have a friend!\r\n\r\n*Disclaimer: It is not actually your friend.",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "DockingStation",
			"displayName": "Docking Station",
			"description": "A docking station for wheeled vehicles to transfer cargo.",
			"parent": "Factory",
			"properties": [
				{
					"internalName": "isLoadMode",
					"displayName": "Is Load Mode",
					"description": "True if the docking station loads docked vehicles, false if it unloads them.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isLoadUnloading",
					"displayName": "Is Load Unloading",
					"description": "True if the docking station is currently loading or unloading a docked vehicle.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getFuelInv",
					"displayName": "Get Fuel Inventory",
					"description": "Returns the fuel inventory of the docking station.",
					"parameters": [
						{
							"internalName": "inventory",
							"displayName": "Inventory",
							"description": "The fuel inventory of the docking station.",
							"type":
							{
								"type": "Trace",
								"subclass": "Inventory"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getInv",
					"displayName": "Get Inventory",
					"description": "Returns the cargo inventory of the docking station.",
					"parameters": [
						{
							"internalName": "inventory",
							"displayName": "Inventory",
							"description": "The cargo inventory of this docking station.",
							"type":
							{
								"type": "Trace",
								"subclass": "Inventory"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getDocked",
					"displayName": "Get Docked",
					"description": "Returns the currently docked actor.",
					"parameters": [
						{
							"internalName": "docked",
							"displayName": "Docked",
							"description": "The currently docked actor.",
							"type":
							{
								"type": "Trace",
								"subclass": "Actor"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "undock",
					"displayName": "Undock",
					"description": "Undocked the currently docked vehicle from this docking station.",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Build_TruckStation_C",
			"displayName": "Truck Station",
			"description": "Either send or receive resources to vehicles. Has an inventory with 48 slots.\r\nTransfers up to 120 stacks per minute to/from docked vehicle. \r\nAlways refuels vehicles if it has access to a matching fuel type.\r\n",
			"parent": "DockingStation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableCheatFluidSink",
			"displayName": "FGBuildableCheatFluidSink",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableCheatFluidSpawner",
			"displayName": "FGBuildableCheatFluidSpawner",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableDroneStation",
			"displayName": "FGBuildableDroneStation",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DroneStation_C",
			"displayName": "Drone Port",
			"description": "Drone Ports can have one other Port assigned as their transport destination.\r\nEach Drone Port can contain a single Drone, which transports available input back and forth between its home and destination Ports.\r\n\r\nThe Drone Port interface provides delivery details and allows management of Port connections.",
			"parent": "FGBuildableDroneStation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableFactorySimpleProducer",
			"displayName": "FGBuildableFactorySimpleProducer",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_TreeGiftProducer_C",
			"displayName": "FICSMAS Gift Tree",
			"description": "It comes bearing gifts.\r\nProduces 15 Gifts per minute.",
			"parent": "FGBuildableFactorySimpleProducer",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableGenerator",
			"displayName": "FGBuildableGenerator",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableGeneratorFuel",
			"displayName": "FGBuildableGeneratorFuel",
			"description": "",
			"parent": "FGBuildableGenerator",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_GeneratorBiomass_C",
			"displayName": "Biomass Burner",
			"description": "Burns various forms of biomass to generate electricity for the power grid.\r\nHas no input and must therefore be fed biomass manually.\r\n\r\nResource consumption will automatically be lowered to meet power demands.",
			"parent": "FGBuildableGeneratorFuel",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_GeneratorBiomassBeltfed_C",
			"displayName": "Belt-fed Biomass Burner",
			"description": "Burns various forms of biomass to generate electricity for the power grid.\r\nCan be fed manually or automatically via the belt input.\r\n\r\nResource consumption will automatically be lowered to meet power demands.",
			"parent": "Build_GeneratorBiomass_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_GeneratorCoal_C",
			"displayName": "Coal Generator",
			"description": "Burns Coal to boil Water, the produced steam rotates turbines to generate electricity for the power grid.\r\nHas a Conveyor Belt and Pipe input, so both the Coal and Water supply can be automated.\r\n\r\nCaution: Always generates at the set clock speed. Shuts down if fuel requirements are not met.",
			"parent": "FGBuildableGeneratorFuel",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_GeneratorFuel_C",
			"displayName": "Fuel Generator",
			"description": "Consumes Fuel to generate electricity for the power grid.\r\nHas a Pipe input so the Fuel supply can be automated.\r\n\r\nCaution: Always generates at the set clock speed. Shuts down if fuel requirements are not met.",
			"parent": "FGBuildableGeneratorFuel",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_GeneratorIntegratedBiomass_C",
			"displayName": "Biomass Burner",
			"description": "Burns Biomass to produce power. Biomass must be loaded manually and is obtained by picking up flora in the world. Produces up to 20 MW of power while operating.",
			"parent": "FGBuildableGeneratorFuel",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableGeneratorNuclear",
			"displayName": "FGBuildableGeneratorNuclear",
			"description": "",
			"parent": "FGBuildableGeneratorFuel",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_GeneratorNuclear_C",
			"displayName": "Nuclear Power Plant",
			"description": "Consumes Nuclear Fuel Rods and Water to produce electricity for the power grid.\r\n\r\nProduces Nuclear Waste, which is extracted from the conveyor belt output.\r\n\r\nCaution: Always generates at the set clock speed. Shuts down if fuel requirements are not met.",
			"parent": "FGBuildableGeneratorNuclear",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableGeneratorGeoThermal",
			"displayName": "FGBuildableGeneratorGeoThermal",
			"description": "",
			"parent": "FGBuildableGenerator",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_GeneratorGeoThermal_C",
			"displayName": "Geothermal Generator",
			"description": "Has to be built on a Geyser. Generates power.\r\n\r\nCaution: Power production fluctuates.\r\n\r\nPower Production:\r\nImpure 50-150 MW (100 MW average)\r\nNormal 100-300 MW (200 MW average)\r\nPure 200-600 MW (400 MW average)",
			"parent": "FGBuildableGeneratorGeoThermal",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableJumppad",
			"displayName": "Jump Pad",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_JumpPadAdjustable_C",
			"displayName": "Jump Pad",
			"description": "Used for quick, vertical traversal.\r\nThe launch angle can be adjusted while building.\r\nCaution: Be sure to land safely!",
			"parent": "FGBuildableJumppad",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePipelineAttachment",
			"displayName": "FGBuildablePipelineAttachment",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePipelineJunction",
			"displayName": "FGBuildablePipelineJunction",
			"description": "",
			"parent": "FGBuildablePipelineAttachment",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipelineJunction_Cross_C",
			"displayName": "Pipeline Junction Cross",
			"description": "Can be attached to a pipeline to split it 4-way.",
			"parent": "FGBuildablePipelineJunction",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "PipelinePump",
			"displayName": "PipelinePump",
			"description": "A building that can pump fluids to a higher level within a pipeline.",
			"parent": "FGBuildablePipelineAttachment",
			"properties": [
				{
					"internalName": "maxHeadlift",
					"displayName": "Max Headlift",
					"description": "The maximum amount of head lift this pump can provide.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "designedHeadlift",
					"displayName": "Designed Headlift",
					"description": "The amount of head lift this pump is designed for.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "indicatorHeadlift",
					"displayName": "Indicator Headlift",
					"description": "The amount of head lift the indicator shows.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "indicatorHeadliftPct",
					"displayName": "Indicator Headlift Percent",
					"description": "The amount of head lift the indicator shows as percentage from max.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "userFlowLimit",
					"displayName": "User Flow Limit",
					"description": "The flow limit of this pump the user can specify. Use -1 for now user set limit. (in m^3/s)",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "flowLimit",
					"displayName": "Flow Limit",
					"description": "The overall flow limit of this pump. (in m^3/s)",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "flowLimitPct",
					"displayName": "Flow Limit Pct",
					"description": "The overall flow limit of this pump. (in percent)",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "flow",
					"displayName": "Flow",
					"description": "The current flow amount. (in m^3/s)",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "flowPct",
					"displayName": "Float Pct",
					"description": "The current flow amount. (in percent)",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipelinePump_C",
			"displayName": "Pipeline Pump Mk.1",
			"description": "Can be attached to a Pipeline to apply Head Lift.\r\nMaximum Head Lift: 20 meters\r\n(Allows fluids to be transported 20 meters upwards.)\r\n\r\nNOTE: Has an in- and output direction.\r\nNOTE: Head Lift does not stack, so space between Pumps is recommended.",
			"parent": "PipelinePump",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipelinePumpMk2_C",
			"displayName": "Pipeline Pump Mk.2",
			"description": "Can be attached to a Pipeline to apply Head Lift.\r\nMaximum Head Lift: 50 meters\r\n(Allows fluids to be transported 50 meters upwards.)\r\n\r\nNOTE: Has an in- and output direction.\r\nNOTE: Head Lift does not stack, so space between Pumps is recommended.",
			"parent": "PipelinePump",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Valve_C",
			"displayName": "Valve",
			"description": "Used to limit Pipeline flow rates.\r\nCan be attached to a Pipeline.\r\n\r\nNOTE: Has an in- and output direction.",
			"parent": "PipelinePump",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePipePart",
			"displayName": "FGBuildablePipePart",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePipeHyperPart",
			"displayName": "FGBuildablePipeHyperPart",
			"description": "",
			"parent": "FGBuildablePipePart",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGPipeHyperStart",
			"displayName": "FGPipeHyperStart",
			"description": "",
			"parent": "FGBuildablePipeHyperPart",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipeHyperStart_C",
			"displayName": "Hypertube Entrance",
			"description": "Used to enter and power a Hypertube.",
			"parent": "FGPipeHyperStart",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableRadarTower",
			"displayName": "FGBuildableRadarTower",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RadarTower_C",
			"displayName": "Radar Tower",
			"description": "Radar Towers scan their surrounding area to display additional information on the Map.\r\n\r\nThe information revealed on the Map includes:\r\n- Resource Node locations\r\n- Terrain data\r\n- Flora & fauna information\r\n- Notable signal readings",
			"parent": "FGBuildableRadarTower",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableResourceExtractorBase",
			"displayName": "FGBuildableResourceExtractorBase",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableFrackingActivator",
			"displayName": "FGBuildableFrackingActivator",
			"description": "",
			"parent": "FGBuildableResourceExtractorBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_FrackingSmasher_C",
			"displayName": "Resource Well Pressurizer",
			"description": "Can be placed on a Resource Well to activate it by pressurizing the underground resource.\r\nOnce activated, Resource Well Extractors can be placed on the surrounding sub-nodes to extract the resource.\r\nRequires Power. Overclocking increases the output potential of the entire Resource Well.",
			"parent": "FGBuildableFrackingActivator",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableResourceExtractor",
			"displayName": "FGBuildableResourceExtractor",
			"description": "",
			"parent": "FGBuildableResourceExtractorBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_MinerMk1_C",
			"displayName": "Miner Mk.1",
			"description": "Extracts solid resources from the resource node it is built on. \r\nThe normal extraction rate is 60 resources per minute. \r\nThe extraction rate is modified depending on resource node purity. Outputs all extracted resources onto connected conveyor belts.",
			"parent": "FGBuildableResourceExtractor",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_MinerMk2_C",
			"displayName": "Miner Mk.2",
			"description": "Extracts solid resources from the resource node it is built on. \r\nThe normal extraction rate is 120 resources per minute. \r\nThe extraction rate is modified depending on resource node purity. Outputs all extracted resources onto connected conveyor belts.",
			"parent": "FGBuildableResourceExtractor",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_MinerMk3_C",
			"displayName": "Miner Mk.3",
			"description": "Extracts solid resources from the resource node it is built on. \r\nThe normal extraction rate is 240 resources per minute. \r\nThe extraction rate is modified depending on resource node purity. Outputs all extracted resources onto connected conveyor belts.",
			"parent": "Build_MinerMk2_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_OilPump_C",
			"displayName": "Oil Extractor",
			"description": "Normal extraction rate: 120m³ oil per minute.\r\nHead Lift: 10 meters.\r\n(Allows fluids to be transported 10 meters upwards.)\r\n\r\nCan be built on an Oil Node to extract Crude Oil. Extraction rates depend on node purity.",
			"parent": "FGBuildableResourceExtractor",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableFrackingExtractor",
			"displayName": "FGBuildableFrackingExtractor",
			"description": "",
			"parent": "FGBuildableResourceExtractor",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_FrackingExtractor_C",
			"displayName": "Resource Well Extractor",
			"description": "Normal extraction rate: 60m³ fluid per minute.\r\nHead Lift: 10 meters.\r\n(Allows fluids to be transported 10 meters upwards.)\r\n\r\nCan be placed on the activated sub-nodes of a Resource Well to collect the pressurized resources. Does not require Power.",
			"parent": "FGBuildableFrackingExtractor",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableWaterPump",
			"displayName": "FGBuildableWaterPump",
			"description": "",
			"parent": "FGBuildableResourceExtractor",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_WaterPump_C",
			"displayName": "Water Extractor",
			"description": "Default extraction rate: 120m³ water per minute.\r\nHead Lift: 10 meters.\r\n(Allows fluids to be transported 10 meters upwards.)\r\n\r\nExtracts water from the body of water it is built on.\r\nNote that the water needs to be deep enough and that rivers do not commonly suffice.",
			"parent": "FGBuildableWaterPump",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableResourceSinkShop",
			"displayName": "FGBuildableResourceSinkShop",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ResourceSinkShop_C",
			"displayName": "AWESOME Shop",
			"description": "Redeem your FICSIT Coupons here! \r\nFor those employees going the extra kilometer we have set aside special bonus milestones and rewards! Get your Coupons in the AWESOME Sink program now!\r\n\r\n*No refunds possible.",
			"parent": "FGBuildableResourceSinkShop",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableSpaceElevator",
			"displayName": "FGBuildableSpaceElevator",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SpaceElevator_C",
			"displayName": "Space Elevator",
			"description": "Requires deliveries of special Project Parts to complete Phases of Project Assembly.\r\nCompleting Phases in the Space Elevator will unlock new Tiers in the HUB Terminal.",
			"parent": "FGBuildableSpaceElevator",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableStorage",
			"displayName": "FGBuildableStorage",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Dispenser_C",
			"displayName": "Item Dispenser",
			"description": "Dispenses 1 stack of items per use from the front. 16 slot buffer inventory. Accepts a belt input.",
			"parent": "FGBuildableStorage",
			"properties": [],
			"functions": [
				{
					"internalName": "getThresholdFillMode",
					"displayName": "getThresholdFillMode",
					"description": "",
					"parameters": [
						{
							"internalName": "thresholdFill",
							"displayName": "thresholdFill",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setThresholdFillMode",
					"displayName": "setThresholdFillMode",
					"description": "",
					"parameters": [
						{
							"internalName": "thresholdFill",
							"displayName": "thresholdFill",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTopOffPartial",
					"displayName": "getTopOffPartial",
					"description": "",
					"parameters": [
						{
							"internalName": "topOffPartial",
							"displayName": "topOffPartial",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setTopOffPartial",
					"displayName": "setTopOffPartial",
					"description": "",
					"parameters": [
						{
							"internalName": "topOff",
							"displayName": "topOff",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getStacksToDispense",
					"displayName": "getStacksToDispense",
					"description": "",
					"parameters": [
						{
							"internalName": "stacksToDispense",
							"displayName": "stacksToDispense",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setStacksToDispense",
					"displayName": "setStacksToDispense",
					"description": "",
					"parameters": [
						{
							"internalName": "stacks",
							"displayName": "stacks",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Build_DispenserMk2_C",
			"displayName": "Industrial Dispenser",
			"description": "Dispenses 1 stack of items per use from the front. 48 slot buffer inventory. Accepts two belt inputs.",
			"parent": "Build_Dispenser_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_MiniDispenser_C",
			"displayName": "Mini Dispenser",
			"description": "Compact dispenser with a 4 slot inventory and a belt input.",
			"parent": "Build_Dispenser_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Hopper_C",
			"displayName": "Item Hopper",
			"description": "Interact with the sides of the hopper to configure the item filter, then interact with the chute to extract a stack of filtered items from your inventory. 24 slot inventory.",
			"parent": "FGBuildableStorage",
			"properties": [],
			"functions": [
				{
					"internalName": "getFilterRules",
					"displayName": "getFilterRules",
					"description": "",
					"parameters": [
						{
							"internalName": "itemRules",
							"displayName": "itemRules",
							"description": "",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "String"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTakeOrLeave",
					"displayName": "getTakeOrLeave",
					"description": "",
					"parameters": [
						{
							"internalName": "takeOrLeave",
							"displayName": "takeOrLeave",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setTakeOrLeave",
					"displayName": "setTakeOrLeave",
					"description": "",
					"parameters": [
						{
							"internalName": "takeOrLeave",
							"displayName": "takeOrLeave",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "removeFilterRule",
					"displayName": "removeFilterRule",
					"description": "",
					"parameters": [
						{
							"internalName": "itemRule",
							"displayName": "itemRule",
							"description": "",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "ruleRemoved",
							"displayName": "ruleRemoved",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "addFilterRule",
					"displayName": "addFilterRule",
					"description": "",
					"parameters": [
						{
							"internalName": "itemRule",
							"displayName": "itemRule",
							"description": "",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "ruleAdded",
							"displayName": "ruleAdded",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "clearFilterRules",
					"displayName": "clearFilterRules",
					"description": "",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTakeFullest",
					"displayName": "getTakeFullest",
					"description": "",
					"parameters": [
						{
							"internalName": "takeFullest",
							"displayName": "takeFullest",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setTakeFullest",
					"displayName": "setTakeFullest",
					"description": "",
					"parameters": [
						{
							"internalName": "takeFullest",
							"displayName": "takeFullest",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getStacksToTake",
					"displayName": "getStacksToTake",
					"description": "",
					"parameters": [
						{
							"internalName": "stacksToTake",
							"displayName": "stacksToTake",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setStacksToTake",
					"displayName": "setStacksToTake",
					"description": "",
					"parameters": [
						{
							"internalName": "stacksToTake",
							"displayName": "stacksToTake",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Build_HopperMk2_C",
			"displayName": "Industrial Hopper",
			"description": "Interact with the sides of the industrial hopper to configure the item filter, then interact with the chute to extract a stack of filtered items from your inventory. 72 slot inventory and 2 belt outputs.",
			"parent": "Build_Hopper_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_MiniHopper_C",
			"displayName": "Mini Hopper",
			"description": "Interact with the sides of the hopper to configure the item filter, then interact with the chute to extract a stack of filtered items from your inventory. 8 slot inventory.",
			"parent": "Build_Hopper_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SmallStorage_C",
			"displayName": "Small Storage Container",
			"description": "A small, 8 slot Storage Container. Stackable.",
			"parent": "FGBuildableStorage",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StorageBlueprint_C",
			"displayName": "Blueprint Storage Box",
			"description": "Blueprint Storage that parts are returned to when the Blueprint Designer is cleared.\r\n\r\n40 Slots.",
			"parent": "FGBuildableStorage",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StorageContainerMk1_C",
			"displayName": "Storage Container",
			"description": "Contains 24 slots for storing large amounts of items.\r\nHas an input and output for conveyor belts.",
			"parent": "FGBuildableStorage",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StorageContainerMk2_C",
			"displayName": "Industrial Storage Container",
			"description": "Contains 48 slots for storing large amounts of items.\r\nHas two inputs and outputs for conveyor belts.",
			"parent": "FGBuildableStorage",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StorageHazard_C",
			"displayName": "Hazard Storage Box",
			"description": "Contains 25 slots for storing large amounts of items.",
			"parent": "FGBuildableStorage",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StorageIntegrated_C",
			"displayName": "Personal Storage Box",
			"description": "A box you can put things in.\r\nHas 25 inventory slots.",
			"parent": "FGBuildableStorage",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StorageMedkit_C",
			"displayName": "Medical Storage Box",
			"description": "Contains 25 slots for storing large amounts of items.",
			"parent": "FGBuildableStorage",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StoragePlayer_C",
			"displayName": "Personal Storage Box",
			"description": "Contains 25 slots for storing large amounts of items.",
			"parent": "FGBuildableStorage",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGCentralStorageContainer",
			"displayName": "FGCentralStorageContainer",
			"description": "",
			"parent": "FGBuildableStorage",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableTradingPost",
			"displayName": "FGBuildableTradingPost",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_TradingPost_C",
			"displayName": "The HUB",
			"description": "The heart of your factory. This is where you complete FICSIT milestones to unlock additional blueprints of buildings, vehicles, parts, equipment etc.",
			"parent": "FGBuildableTradingPost",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableWindTurbine",
			"displayName": "FGBuildableWindTurbine",
			"description": "",
			"parent": "Factory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Manufacturer",
			"displayName": "Manufacturer",
			"description": "The base class of every machine that uses a recipe to produce something automatically.",
			"parent": "Factory",
			"properties": [],
			"functions": [
				{
					"internalName": "getRecipe",
					"displayName": "Get Recipe",
					"description": "Returns the currently set recipe of the manufacturer.",
					"parameters": [
						{
							"internalName": "recipe",
							"displayName": "Recipe",
							"description": "The currently set recipe.",
							"type":
							{
								"type": "Class",
								"subclass": "Recipe"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getRecipes",
					"displayName": "Get Recipes",
					"description": "Returns the list of recipes this manufacturer can get set to and process.",
					"parameters": [
						{
							"internalName": "recipes",
							"displayName": "Recipes",
							"description": "The list of available recipes.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Class",
									"subclass": "Recipe"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setRecipe",
					"displayName": "Set Recipe",
					"description": "Sets the currently producing recipe of this manufacturer.",
					"parameters": [
						{
							"internalName": "recipe",
							"displayName": "Recipe",
							"description": "The recipe this manufacturer should produce.",
							"type":
							{
								"type": "Class",
								"subclass": "Recipe"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "gotSet",
							"displayName": "Got Set",
							"description": "True if the current recipe got successfully set to the new recipe.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getInputInv",
					"displayName": "Get Input Inventory",
					"description": "Returns the input inventory of this manufacturer.",
					"parameters": [
						{
							"internalName": "inventory",
							"displayName": "Inventory",
							"description": "The input inventory of this manufacturer",
							"type":
							{
								"type": "Trace",
								"subclass": "Inventory"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getOutputInv",
					"displayName": "Get Output Inventory",
					"description": "Returns the output inventory of this manufacturer.",
					"parameters": [
						{
							"internalName": "inventory",
							"displayName": "Inventory",
							"description": "The output inventory of this manufacturer.",
							"type":
							{
								"type": "Trace",
								"subclass": "Inventory"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Build_AssemblerMk1_C",
			"displayName": "Assembler",
			"description": "Crafts two parts into another part.\r\n\r\nCan be automated by feeding parts into it with a conveyor belt connected to the input. The produced parts can be automatically extracted by connecting a conveyor belt to the output.",
			"parent": "Manufacturer",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Blender_C",
			"displayName": "Blender",
			"description": "The Blender is capable of blending fluids and combining them with solid parts in various processes.\r\nHead Lift: 10 meters.\r\n(Allows fluids to be transported 10 meters upwards).\r\n\r\nContains both Conveyor Belt and Pipe inputs and outputs.",
			"parent": "Manufacturer",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConstructorMk1_C",
			"displayName": "Constructor",
			"description": "Crafts one part into another part.\r\n\r\nCan be automated by feeding parts into it with a conveyor belt connected to the input. The produced parts can be automatically extracted by connecting a conveyor belt to the output.",
			"parent": "Manufacturer",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_FoundryMk1_C",
			"displayName": "Foundry",
			"description": "Smelts two resources into alloy ingots.\r\n\r\nCan be automated by feeding ore into it with a conveyor belt connected to the inputs. The produced ingots can be automatically extracted by connecting a conveyor belt to the output.",
			"parent": "Manufacturer",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ManufacturerMk1_C",
			"displayName": "Manufacturer",
			"description": "Crafts three or four parts into another part.\r\n\r\nCan be automated by feeding parts into it with a conveyor belt connected to the input. The produced parts can be automatically extracted by connecting a conveyor belt to the output.",
			"parent": "Manufacturer",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_OilRefinery_C",
			"displayName": "Refinery",
			"description": "Refines fluid and/or solid parts into other parts.\r\nHead Lift: 10 meters.\r\n(Allows fluids to be transported 10 meters upwards.)\r\n\r\nContains both a Conveyor Belt and Pipe input and output, to allow for the automation of various recipes.",
			"parent": "Manufacturer",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Packager_C",
			"displayName": "Packager",
			"description": "Used for the packaging and unpacking of fluids.\r\nHead Lift: 10 meters.\r\n(Allows fluids to be transported 10 meters upwards.)\r\n\r\nContains both a Conveyor Belt and Pipe input and output, to allow for the automation of various recipes.",
			"parent": "Manufacturer",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SmelterMk1_C",
			"displayName": "Smelter",
			"description": "Smelts ore into ingots.\r\n\r\nCan be automated by feeding ore into it with a conveyor belt connected to the input. The produced ingots can be automatically extracted by connecting a conveyor belt to the output.",
			"parent": "Manufacturer",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableAutomatedWorkBench",
			"displayName": "FGBuildableAutomatedWorkBench",
			"description": "",
			"parent": "Manufacturer",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_AutomatedWorkBench_C",
			"displayName": "Automated Work bench",
			"description": "text here",
			"parent": "FGBuildableAutomatedWorkBench",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableConverter",
			"displayName": "FGBuildableConverter",
			"description": "",
			"parent": "Manufacturer",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Converter_C",
			"displayName": "Converter",
			"description": "Converts any 2 raw resources into 1 raw resource of your choosing.\r\nRequires 40 MW of power to operate.\r\nIs built using the super rare resource Strange Alien Metal.",
			"parent": "FGBuildableConverter",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableManufacturerVariablePower",
			"displayName": "FGBuildableManufacturerVariablePower",
			"description": "",
			"parent": "Manufacturer",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_HadronCollider_C",
			"displayName": "Particle Accelerator",
			"description": "The FICSIT Particle Accelerator uses electromagnetic fields to propel particles to very high speeds and energies. The specific design allows for a variety of processes, such as matter generation and conversion.\r\n\r\nWarning: Power usage is extremely high, unstable, and varies per recipe.",
			"parent": "FGBuildableManufacturerVariablePower",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "PipeReservoir",
			"displayName": "Pipe Reservoir",
			"description": "The base class for all fluid tanks.",
			"parent": "Factory",
			"properties": [
				{
					"internalName": "fluidContent",
					"displayName": "Fluid Content",
					"description": "The amount of fluid in the tank.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "maxFluidContent",
					"displayName": "Max Fluid Content",
					"description": "The maximum amount of fluid this tank can hold.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "flowFill",
					"displayName": "Flow Fill",
					"description": "The current inflow rate of fluid.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "flowDrain",
					"displayName": "Float Drain",
					"description": "The current outflow rate of fluid.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "flowLimit",
					"displayName": "Flow Limit",
					"description": "The maximum flow rate of fluid this tank can handle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "flush",
					"displayName": "Flush",
					"description": "Empties the whole fluid container.",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getFluidType",
					"displayName": "Get Fluid Type",
					"description": "Returns the type of the fluid.",
					"parameters": [
						{
							"internalName": "type",
							"displayName": "Type",
							"description": "The type of the fluid the tank contains.",
							"type":
							{
								"type": "Class",
								"subclass": "ItemType"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Build_IndustrialTank_C",
			"displayName": "Industrial Fluid Buffer",
			"description": "Can contain up to 2400m³ of fluid.\r\nHas an input and output for pipes.",
			"parent": "PipeReservoir",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipeStorageTank_C",
			"displayName": "Fluid Buffer",
			"description": "Can contain up to 400m³ of fluid.\r\nHas an input and output for pipes.",
			"parent": "PipeReservoir",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "PowerStorage",
			"displayName": "Power Storage",
			"description": "A building that can store power for later usage.",
			"parent": "Factory",
			"properties": [
				{
					"internalName": "powerStore",
					"displayName": "Power Store",
					"description": "The current amount of energy stored in the storage.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "powerCapacity",
					"displayName": "Power Capacity",
					"description": "The amount of energy the storage can hold max.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "powerStorePercent",
					"displayName": "Power Store Percent",
					"description": "The current power store in percent.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "powerIn",
					"displayName": "Power Input",
					"description": "The amount of power coming into the storage.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "powerOut",
					"displayName": "Power Output",
					"description": "The amount of power going out from the storage.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "timeUntilFull",
					"displayName": "Time until Full",
					"description": "The time in seconds until the storage is filled.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "timeUntilEmpty",
					"displayName": "Time until Empty",
					"description": "The time in seconds until the storage is empty.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "batteryStatus",
					"displayName": "Battery Status",
					"description": "The current status of the battery.\n0 = Idle, 1 = Idle Empty, 2 = Idle Full, 3 = Power In, 4 = Power Out",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "batteryMaxIndicatorLevel",
					"displayName": "Max Indicator Level",
					"description": "The maximum count of Level lights that are shown.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PowerStorageMk1_C",
			"displayName": "Power Storage",
			"description": "Storage Capacity: 100 MWh (100 MW for 1 hour)\r\nMax Charge Rate: 100 MW\r\nMax Discharge Rate: Unlimited \r\n\r\nCan be connected to a Power Grid to store excess power production. The stored power can be used later in cases of high consumption.",
			"parent": "PowerStorage",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "RailroadSwitchControl",
			"displayName": "Railroad Switch Control",
			"description": "The controller object for a railroad switch.",
			"parent": "Factory",
			"properties": [],
			"functions": [
				{
					"internalName": "toggleSwitch",
					"displayName": "Toggle Switch",
					"description": "Toggles the railroad switch like if you interact with it.",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "switchPosition",
					"displayName": "Switch Position",
					"description": "Returns the current switch position of this switch.",
					"parameters": [
						{
							"internalName": "position",
							"displayName": "Position",
							"description": "The current switch position of this switch.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Build_RailroadSwitchControl_C",
			"displayName": "Railroad Switch Control",
			"description": "",
			"parent": "RailroadSwitchControl",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "ResourceSink",
			"displayName": "Resource Sink",
			"description": "The resource sink, also known a A.W.E.S.O.M.E Sink",
			"parent": "Factory",
			"properties": [
				{
					"internalName": "numPoints",
					"displayName": "Num Points",
					"description": "The number of available points.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "numCoupons",
					"displayName": "Num Coupons",
					"description": "The number of available coupons to print.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "numPointsToNextCoupon",
					"displayName": "Num Points To Next Coupon",
					"description": "The number of needed points for the next coupon.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "couponProgress",
					"displayName": "Coupon Progress",
					"description": "The percentage of the progress for the next coupon.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ResourceSink_C",
			"displayName": "AWESOME Sink",
			"description": "Got excess resources? Fear not, for FICSIT does not waste! The newly developed AWESOME Sink turns any useful part straight into research data, as fast as you can supply it! \r\nParticipating pioneers will be compensated with Coupons to be spend at the AWESOME Shop.",
			"parent": "ResourceSink",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "TrainPlatform",
			"displayName": "Train Platform",
			"description": "The base class for all train station parts.",
			"parent": "Factory",
			"properties": [
				{
					"internalName": "status",
					"displayName": "Status",
					"description": "The current docking status of the platform.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isReversed",
					"displayName": "Is Reversed",
					"description": "True if the orientation of the platform is reversed relative to the track/station.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getTrackGraph",
					"displayName": "Get Track Graph",
					"description": "Returns the track graph of which this platform is part of.",
					"parameters": [
						{
							"internalName": "graph",
							"displayName": "Graph",
							"description": "The track graph of which this platform is part of.",
							"type":
							{
								"type": "Struct",
								"inner": "TrackGraph"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTrackPos",
					"displayName": "Get Track Pos",
					"description": "Returns the track pos at which this train platform is placed.",
					"parameters": [
						{
							"internalName": "track",
							"displayName": "Track",
							"description": "The track the track pos points to.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadTrack"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "offset",
							"displayName": "Offset",
							"description": "The offset of the track pos.",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "forward",
							"displayName": "Forward",
							"description": "The forward direction of the track pos. 1 = with the track direction, -1 = against the track direction",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getConnectedPlatform",
					"displayName": "Get Connected Platform",
					"description": "Returns the connected platform in the given direction.",
					"parameters": [
						{
							"internalName": "direction",
							"displayName": "Direction",
							"description": "The direction in which you want to get the connected platform.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "platform",
							"displayName": "Platform",
							"description": "The platform connected to this platform in the given direction.",
							"type":
							{
								"type": "Trace",
								"subclass": "TrainPlatform"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getDockedVehicle",
					"displayName": "Get Docked Vehicle",
					"description": "Returns the currently docked vehicle.",
					"parameters": [
						{
							"internalName": "vehicle",
							"displayName": "Vehicle",
							"description": "The currently docked vehicle",
							"type":
							{
								"type": "Trace",
								"subclass": "Vehicle"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getMaster",
					"displayName": "Get Master",
					"description": "Returns the master platform of this train station.",
					"parameters": [
						{
							"internalName": "master",
							"displayName": "Master",
							"description": "The master platform of this train station.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadVehicle"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getDockedLocomotive",
					"displayName": "Get Docked Locomotive",
					"description": "Returns the currently docked locomotive at the train station.",
					"parameters": [
						{
							"internalName": "locomotive",
							"displayName": "Locomotive",
							"description": "The currently docked locomotive at the train station.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadVehicle"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "FGBuildableTrainPlatformEmpty",
			"displayName": "FGBuildableTrainPlatformEmpty",
			"description": "",
			"parent": "TrainPlatform",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_TrainPlatformEmpty_02_C",
			"displayName": "Empty Platform With Catwalk",
			"description": "An empty train platform for when you need to create some empty space.",
			"parent": "FGBuildableTrainPlatformEmpty",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_TrainPlatformEmpty_C",
			"displayName": "Empty Platform",
			"description": "An empty train platform for when you need to create some empty space.",
			"parent": "FGBuildableTrainPlatformEmpty",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "RailroadStation",
			"displayName": "Railroad Station",
			"description": "The train station master platform. This platform holds the name and manages docking of trains.",
			"parent": "TrainPlatform",
			"properties": [
				{
					"internalName": "name",
					"displayName": "Name",
					"description": "The name of the railroad station.",
					"type":
					{
						"type": "String"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "dockedOffset",
					"displayName": "Docked Offset",
					"description": "The Offset to the beginning of the station at which trains dock.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_TrainStation_C",
			"displayName": "Train Station",
			"description": "Locomotives can be set to drive to and stop at the Train Station.\r\nYou can connect power to the train station to power up the trains on the railway as well as transport the power to other stations.",
			"parent": "RailroadStation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "TrainPlatformCargo",
			"displayName": "Train Platform Cargo",
			"description": "A train platform that allows for loading and unloading cargo cars.",
			"parent": "TrainPlatform",
			"properties": [
				{
					"internalName": "isLoading",
					"displayName": "Is Loading",
					"description": "True if the cargo platform is currently loading the docked cargo vehicle.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isUnloading",
					"displayName": "Is Unloading",
					"description": "True if the cargo platform is currently unloading the docked cargo vehicle.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "dockedOffset",
					"displayName": "Docked Offset",
					"description": "The offset to the track start of the platform at were the vehicle docked.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "outputFlow",
					"displayName": "Output Flow",
					"description": "The current output flow rate.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "inputFlow",
					"displayName": "Input Flow",
					"description": "The current input flow rate.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "fullLoad",
					"displayName": "Full Load",
					"description": "True if the docked cargo vehicle is fully loaded.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "fullUnload",
					"displayName": "Full Unload",
					"description": "Ture if the docked cargo vehicle is fully unloaded.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_TrainDockingStation_C",
			"displayName": "Freight Platform",
			"description": "Freight Cars that stop at the Freight Platform will be loaded or unloaded by the Freight Platform.\r\nLoading and unloading options can be set inside the building.\r\nSnaps to other Platforms and Stations.\r\nNeeds to be connected to a powered Railway to function.",
			"parent": "TrainPlatformCargo",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_TrainDockingStationLiquid_C",
			"displayName": "Fluid Freight Platform",
			"description": "Freight Cars that stop at the Freight Platform will be loaded or unloaded by the Freight Platform.\r\nLoading and unloading options can be set inside the building.\r\nSnaps to other Platforms and Stations.\r\nNeeds to be connected to a powered Railway to function.",
			"parent": "TrainPlatformCargo",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableBlueprintDesigner",
			"displayName": "FGBuildableBlueprintDesigner",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_BlueprintDesigner_C",
			"displayName": "Blueprint Designer",
			"description": "The Blueprint Designer is used to create custom factory designs and save them as Blueprints.\r\nBlueprints can be accessed from the Build Menu - Blueprint tab.\r\n\r\nNote that buildings can only be placed within the Blueprint Designer if they are fully within the boundary frame.\r\n\r\nDesigner Dimensions: 32m x 32m x 32m",
			"parent": "FGBuildableBlueprintDesigner",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableCalendar",
			"displayName": "FGBuildableCalendar",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "BP_ChristmasCalendar_C",
			"displayName": "BP_ChristmasCalendar_C",
			"description": "",
			"parent": "FGBuildableCalendar",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableConveyorAttachment",
			"displayName": "FGBuildableConveyorAttachment",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "CodeableMerger",
			"displayName": "Codeable Merger",
			"description": "",
			"parent": "FGBuildableConveyorAttachment",
			"properties": [
				{
					"internalName": "canOutput",
					"displayName": "Can Output",
					"description": "Is true if the output queue has a slot available for an item from one of the input queues.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": true,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "transferItem",
					"displayName": "Transfer Item",
					"description": "Allows to transfer an item from the given input queue to the output queue if possible.",
					"parameters": [
						{
							"internalName": "input",
							"displayName": "Input",
							"description": "The index of the input queue you want to transfer the next item to the output queue. (0 = right, 1 = middle, 2 = left)",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "transferred",
							"displayName": "Transferred",
							"description": "true if it was able to transfer the item.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getInput",
					"displayName": "Get Input",
					"description": "Returns the next item in the given input queue.",
					"parameters": [
						{
							"internalName": "input",
							"displayName": "Input",
							"description": "The index of the input queue you want to check (0 = right, 1 = middle, 2 = left)",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "item",
							"displayName": "Item",
							"description": "The next item in the input queue.",
							"type":
							{
								"type": "Struct",
								"inner": "Item"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "ItemRequest",
					"displayName": "Item Request",
					"description": "Triggers when a new item is ready in one of the input queues.",
					"parameters": [
						{
							"internalName": "input",
							"displayName": "Input",
							"description": "The index of the input queue at which the item is ready.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "item",
							"displayName": "Item",
							"description": "The new item in the input queue.",
							"type":
							{
								"type": "Struct",
								"inner": "Item"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				},
				{
					"internalName": "ItemOutputted",
					"displayName": "Item Outputted",
					"description": "Triggers when an item is popped from the output queue (aka it got transferred to a conveyor).",
					"parameters": [
						{
							"internalName": "item",
							"displayName": "Item",
							"description": "The item removed from the output queue.",
							"type":
							{
								"type": "Struct",
								"inner": "Item"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "CodeableMerger_C",
			"displayName": "Codeable Merger",
			"description": "The FICSIT-Networks Codeable Merger  is able to get connected to the component network and provides functions and signals for custom merger behaviour definition.\r\n\r\nThis allows you to change the merging behaviour in runtime by connected computers so it can f.e. depend on the amount of items in a storage container.",
			"parent": "CodeableMerger",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "CodeableSplitter",
			"displayName": "Codeable Splitter",
			"description": "",
			"parent": "FGBuildableConveyorAttachment",
			"properties": [],
			"functions": [
				{
					"internalName": "transferItem",
					"displayName": "Transfer Item",
					"description": "Allows to transfer an item from the input queue to the given output queue if possible.",
					"parameters": [
						{
							"internalName": "output",
							"displayName": "Output",
							"description": "The index of the output queue you want to transfer the next item to (0 = left, 1 = middle, 2 = right)",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "transferred",
							"displayName": "Transferred",
							"description": "true if it was able to transfer the item.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getInput",
					"displayName": "Get Input",
					"description": "Returns the next item in the input queue.",
					"parameters": [
						{
							"internalName": "item",
							"displayName": "Item",
							"description": "The next item in the input queue.",
							"type":
							{
								"type": "Struct",
								"inner": "Item"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "canOutput",
					"displayName": "Can Output",
					"description": "Allows to check if we can transfer an item to the given output queue.",
					"parameters": [
						{
							"internalName": "output",
							"displayName": "Output",
							"description": "The index of the output queue you want to check (0 = left, 1 = middle, 2 = right)",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "canTransfer",
							"displayName": "Can Transfer",
							"description": "True if you could transfer an item to the given output queue.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "ItemRequest",
					"displayName": "Item Request",
					"description": "Triggers when a new item is ready in the input queue.",
					"parameters": [
						{
							"internalName": "item",
							"displayName": "Item",
							"description": "The new item in the input queue.",
							"type":
							{
								"type": "Struct",
								"inner": "Item"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				},
				{
					"internalName": "ItemOutputted",
					"displayName": "Item Outputted",
					"description": "Triggers when an item is popped from on of the output queues (aka it got transferred to a conveyor).",
					"parameters": [
						{
							"internalName": "output",
							"displayName": "Output",
							"description": "The index of the output queue from which the item got removed.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "item",
							"displayName": "Item",
							"description": "The item removed from the output queue.",
							"type":
							{
								"type": "Struct",
								"inner": "Item"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "CodeableSplitter_C",
			"displayName": "Codeable Splitter",
			"description": "The FICSIT-Networks Codeable Splitter is able to get connected to the component network and provides functions and signals for custom splitter behaviour definition.\r\n\r\nThis allows you to change the splitting behaviour in runtime by connected computers so it can f.e. depend on the amount of items in a storage container.",
			"parent": "CodeableSplitter",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableAttachmentMerger",
			"displayName": "FGBuildableAttachmentMerger",
			"description": "",
			"parent": "FGBuildableConveyorAttachment",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorAttachmentMerger_C",
			"displayName": "Conveyor Merger",
			"description": "Merges up to three conveyor belts into one.",
			"parent": "FGBuildableAttachmentMerger",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableAttachmentSplitter",
			"displayName": "FGBuildableAttachmentSplitter",
			"description": "",
			"parent": "FGBuildableConveyorAttachment",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorAttachmentSplitter_C",
			"displayName": "Conveyor Splitter",
			"description": "Splits conveyor belts in three. \r\nUseful to move parts and resources from over-saturated conveyor belts.",
			"parent": "FGBuildableAttachmentSplitter",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableConveyorAttachmentLightweight",
			"displayName": "FGBuildableConveyorAttachmentLightweight",
			"description": "",
			"parent": "FGBuildableConveyorAttachment",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableSplitterSmart",
			"displayName": "FGBuildableSplitterSmart",
			"description": "",
			"parent": "FGBuildableConveyorAttachment",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorAttachmentSplitterProgrammable_C",
			"displayName": "Programmable Splitter",
			"description": "Splits conveyor belts in three. \r\nYou can set rules for each output to decide exactly where each part should go.",
			"parent": "FGBuildableSplitterSmart",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorAttachmentSplitterSmart_C",
			"displayName": "Smart Splitter",
			"description": "Splits conveyor belts in three.\r\nYou can set a rule for each output to decide exactly what part should go there.",
			"parent": "FGBuildableSplitterSmart",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableConveyorBase",
			"displayName": "FGBuildableConveyorBase",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableConveyorBelt",
			"displayName": "FGBuildableConveyorBelt",
			"description": "",
			"parent": "FGBuildableConveyorBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorBeltMk1_C",
			"displayName": "Conveyor Belt Mk.1",
			"description": "Transports up to 60 resources per minute. Used to move resources between buildings.",
			"parent": "FGBuildableConveyorBelt",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorBeltMk2_C",
			"displayName": "Conveyor Belt Mk.2",
			"description": "Transports up to 120 resources per minute. Used to move resources between buildings.",
			"parent": "Build_ConveyorBeltMk1_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorBeltMk3_C",
			"displayName": "Conveyor Belt Mk.3",
			"description": "Transports up to 270 resources per minute. Used to move resources between buildings.",
			"parent": "Build_ConveyorBeltMk1_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorBeltMk4_C",
			"displayName": "Conveyor Belt Mk.4",
			"description": "Transports up to 480 resources per minute. Used to move resources between buildings.",
			"parent": "Build_ConveyorBeltMk1_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorBeltMk5_C",
			"displayName": "Conveyor Belt Mk.5",
			"description": "Transports up to 780 resources per minute. Used to move resources between buildings.",
			"parent": "Build_ConveyorBeltMk1_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableConveyorLift",
			"displayName": "FGBuildableConveyorLift",
			"description": "",
			"parent": "FGBuildableConveyorBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorLiftMk1_C",
			"displayName": "Conveyor Lift Mk.1",
			"description": "Transports up to 60 resources per minute. Used to move resources between floors.",
			"parent": "FGBuildableConveyorLift",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorLiftMk2_C",
			"displayName": "Conveyor Lift Mk.2",
			"description": "Transports up to 120 resources per minute. Used to move resources between floors.",
			"parent": "Build_ConveyorLiftMk1_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorLiftMk3_C",
			"displayName": "Conveyor Lift Mk.3",
			"description": "Transports up to 270 resources per minute. Used to move resources between floors.",
			"parent": "Build_ConveyorLiftMk1_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorLiftMk4_C",
			"displayName": "Conveyor Lift Mk.4",
			"description": "Transports up to 480 resources per minute. Used to move resources between floors.",
			"parent": "Build_ConveyorLiftMk1_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorLiftMk5_C",
			"displayName": "Conveyor Lift Mk.5",
			"description": "Transports up to 780 resources per minute. Used to move resources between floors.",
			"parent": "Build_ConveyorLiftMk1_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableDecor",
			"displayName": "FGBuildableDecor",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableFactoryBuilding",
			"displayName": "FGBuildableFactoryBuilding",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Beam_Connector_C",
			"displayName": "Beam Connector",
			"description": "Can be connected to Beams to hide seams and generally make connections look more appealing.",
			"parent": "FGBuildableFactoryBuilding",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Beam_Connector_Double_C",
			"displayName": "Beam Connector Double",
			"description": "Can be connected to Beams to hide seams and generally make connections look more appealing.",
			"parent": "FGBuildableFactoryBuilding",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Beam_Support_C",
			"displayName": "Beam Support",
			"description": "Snaps to Beams and various other structural buildings.\r\nUsed to aesthetically connect beams to surfaces.",
			"parent": "FGBuildableFactoryBuilding",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableBeam",
			"displayName": "FGBuildableBeam",
			"description": "",
			"parent": "FGBuildableFactoryBuilding",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableBeamLightweight",
			"displayName": "FGBuildableBeamLightweight",
			"description": "",
			"parent": "FGBuildableBeam",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Beam_C",
			"displayName": "Metal Beam",
			"description": "Snaps to other Beams and various other structural buildings.\r\nBeams support multiple build modes for different use cases.",
			"parent": "FGBuildableBeamLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Beam_Painted_C",
			"displayName": "Painted Beam",
			"description": "Snaps to other Beams and various other structural buildings.\r\nBeams support multiple build modes for different use cases.",
			"parent": "FGBuildableBeamLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableCornerWall",
			"displayName": "FGBuildableCornerWall",
			"description": "",
			"parent": "FGBuildableFactoryBuilding",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Metal_InCorner_01_C",
			"displayName": "Inner Corner Roof 1m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Metal_InCorner_02_C",
			"displayName": "Inner Corner Roof 2m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Metal_InCorner_03_C",
			"displayName": "Inner Corner Roof 4m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Metal_OutCorner_01_C",
			"displayName": "Outer Corner Roof 1m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Metal_OutCorner_02_C",
			"displayName": "Outer Corner Roof 2m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Metal_OutCorner_03_C",
			"displayName": "Outer Corner Roof 4m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Orange_InCorner_01_C",
			"displayName": "Inner Corner Roof 1m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Orange_InCorner_02_C",
			"displayName": "Inner Corner Roof 2m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Orange_InCorner_03_C",
			"displayName": "Inner Corner Roof 4m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Orange_OutCorner_01_C",
			"displayName": "Outer Corner Roof 1m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Orange_OutCorner_02_C",
			"displayName": "Outer Corner Roof 2m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Orange_OutCorner_03_C",
			"displayName": "Outer Corner Roof 4m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Tar_InCorner_01_C",
			"displayName": "Inner Corner Roof 1m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Tar_InCorner_02_C",
			"displayName": "Inner Corner Roof 2m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Tar_InCorner_03_C",
			"displayName": "Inner Corner Roof 4m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Tar_OutCorner_01_C",
			"displayName": "Outer Corner Roof 1m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Tar_OutCorner_02_C",
			"displayName": "Outer Corner Roof 2m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Tar_OutCorner_03_C",
			"displayName": "Outer Corner Roof 4m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Window_InCorner_01_C",
			"displayName": "Inner Corner Roof 1m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Window_InCorner_02_C",
			"displayName": "Inner Corner Roof 2m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Window_InCorner_03_C",
			"displayName": "Inner Corner Roof 4m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Window_OutCorner_01_C",
			"displayName": "Outer Corner Roof 1m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Window_OutCorner_02_C",
			"displayName": "Outer Corner Roof 2m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Window_OutCorner_03_C",
			"displayName": "Outer Corner Roof 4m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_8x4_Corner_01_C",
			"displayName": "Tilted Corner Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_8x4_Corner_2_C",
			"displayName": "Tilted Concave Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_8x8_Corner_01_C",
			"displayName": "Tilted Corner Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_8x8_Corner_2_C",
			"displayName": "Tilted Concave Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_8x4_Corner_01_C",
			"displayName": "Tilted Corner Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_8x4_Corner_02_C",
			"displayName": "Tilted Concave Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_8x8_Corner_01_C",
			"displayName": "Tilted Corner Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_8x8_Corner_02_C",
			"displayName": "Tilted Concave Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Steel_8x4_Corner_01_C",
			"displayName": "Tilted Corner Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Steel_8x4_Corner_2_C",
			"displayName": "Tilted Concave Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Steel_8x8_Corner_01_C",
			"displayName": "Tilted Corner Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Steel_8x8_Corner_2_C",
			"displayName": "Tilted Concave Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableCornerWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableFactoryBuildingLightweight",
			"displayName": "FGBuildableFactoryBuildingLightweight",
			"description": "",
			"parent": "FGBuildableFactoryBuilding",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableFoundation",
			"displayName": "FGBuildableFoundation",
			"description": "",
			"parent": "FGBuildableFactoryBuilding",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DownQuarterPipe_Asphalt_8x4_C",
			"displayName": "Inverted Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DownQuarterPipe_Concrete_8x4_C",
			"displayName": "Inverted Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DownQuarterPipe_ConcretePolished_8x4_C",
			"displayName": "Inverted Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DownQuarterPipe_Grip_8x4_C",
			"displayName": "Inverted Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DownQuarterPipeInCorner_Asphalt_8x4_C",
			"displayName": "Inverted Inner Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DownQuarterPipeInCorner_Concrete_8x4_C",
			"displayName": "Inverted Inner Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DownQuarterPipeInCorner_ConcretePolished_8x4_C",
			"displayName": "Inverted Inner Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DownQuarterPipeInCorner_Grip_8x4_C",
			"displayName": "Inverted Inner Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DownQuarterPipeOutCorner_Asphalt_8x4_C",
			"displayName": "Inverted Outer Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DownQuarterPipeOutCorner_Concrete_8x4_C",
			"displayName": "Inverted Outer Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DownQuarterPipeOutCorner_ConcretePolished_8x4_C",
			"displayName": "Inverted Outer Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DownQuarterPipeOutCorner_Grip_8x4_C",
			"displayName": "Inverted Outer Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Flat_Frame_01_C",
			"displayName": "Frame Floor",
			"description": "Snaps to other structural buildings.\r\nFrames provide a more open factory aesthetic.\r\n\r\nSize: 8m x 0.5m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_DCorner_Asphalt_8x1_C",
			"displayName": "Inv. Down Corner 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_DCorner_Asphalt_8x2_C",
			"displayName": "Inv. Down Corner 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_DCorner_Asphalt_8x4_C",
			"displayName": "Inv. Down Corner 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_DCorner_Concrete_8x1_C",
			"displayName": "Inv. Down Corner 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_DCorner_Concrete_8x2_C",
			"displayName": "Inv. Down Corner 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_DCorner_Concrete_8x4_C",
			"displayName": "Inv. Down Corner 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_DCorner_Metal_8x1_C",
			"displayName": "Inv. Down Corner 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_DCorner_Metal_8x2_C",
			"displayName": "Inv. Down Corner 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_DCorner_Metal_8x4_C",
			"displayName": "Inv. Down Corner 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_DCorner_Polished_8x1_C",
			"displayName": "Inv. Down Corner 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_DCorner_Polished_8x2_C",
			"displayName": "Inv. Down Corner 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_DCorner_Polished_8x4_C",
			"displayName": "Inv. Down Corner 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_UCorner_Asphalt_8x1_C",
			"displayName": "Inv. Up Corner 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_UCorner_Asphalt_8x2_C",
			"displayName": "Inv. Up Corner 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_UCorner_Asphalt_8x4_C",
			"displayName": "Inv. Up Corner 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_UCorner_Concrete_8x1_C",
			"displayName": "Inv. Up Corner 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_UCorner_Concrete_8x2_C",
			"displayName": "Inv. Up Corner 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_UCorner_Concrete_8x4_C",
			"displayName": "Inv. Up Corner 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_UCorner_Metal_8x1_C",
			"displayName": "Inv. Up Corner 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_UCorner_Metal_8x2_C",
			"displayName": "Inv. Up Corner 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_UCorner_Metal_8x4_C",
			"displayName": "Inv. Up Corner 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_UCorner_Polished_8x1_C",
			"displayName": "Inv. Up Corner 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_UCorner_Polished_8x2_C",
			"displayName": "Inv. Up Corner 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_UCorner_Polished_8x4_C",
			"displayName": "Inv. Up Corner 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipe_02_C",
			"displayName": "Inverted Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipe_Asphalt_8x4_C",
			"displayName": "Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipe_C",
			"displayName": "Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipe_Concrete_8x4_C",
			"displayName": "Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipe_ConcretePolished_8x4_C",
			"displayName": "Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipe_Grip_8x4_C",
			"displayName": "Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeCorner_01_C",
			"displayName": "Inner Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeCorner_02_C",
			"displayName": "Inverted Inner Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeCorner_03_C",
			"displayName": "Outer Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeCorner_04_C",
			"displayName": "Inverted Outer Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeInCorner_Asphalt_8x4_C",
			"displayName": "Inner Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeInCorner_Concrete_8x4_C",
			"displayName": "Inner Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeInCorner_ConcretePolished_8x4_C",
			"displayName": "Inner Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeInCorner_Grip_8x4_C",
			"displayName": "Inner Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_Asphalt_8x1_C",
			"displayName": "Half 1m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_Asphalt_8x2_C",
			"displayName": "Half 2m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_Asphalt_8x4_C",
			"displayName": "Half 4m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_Concrete_8x1_C",
			"displayName": "Half 1m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_Concrete_8x2_C",
			"displayName": "Half 2m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_Concrete_8x4_C",
			"displayName": "Half 4m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_Ficsit_8x1_C",
			"displayName": "Half 1m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_Ficsit_8x2_C",
			"displayName": "Half 2m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_Ficsit_8x4_C",
			"displayName": "Half 4m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_Grip_8x1_C",
			"displayName": "Half 1m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_Grip_8x2_C",
			"displayName": "Half 2m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_Grip_8x4_C",
			"displayName": "Half 4m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_PolishedConcrete_8x1_C",
			"displayName": "Half 1m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_PolishedConcrete_8x2_C",
			"displayName": "Half 2m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddle_PolishedConcrete_8x4_C",
			"displayName": "Half 4m Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_Asphalt_8x1_C",
			"displayName": "Inner Corner Extension 1m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_Asphalt_8x2_C",
			"displayName": "Inner Corner Extension 2m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_Asphalt_8x4_C",
			"displayName": "Inner Corner Extension 4m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_Concrete_8x1_C",
			"displayName": "Inner Corner Extension 1m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_Concrete_8x2_C",
			"displayName": "Inner Corner Extension 2m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_Concrete_8x4_C",
			"displayName": "Inner Corner Extension 4m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_Ficsit_8x1_C",
			"displayName": "Inner Corner Extension 1m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_Ficsit_8x2_C",
			"displayName": "Inner Corner Extension 2m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_Ficsit_8x4_C",
			"displayName": "Inner Corner Extension 4m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_Grip_8x1_C",
			"displayName": "Inner Corner Extension 1m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_Grip_8x2_C",
			"displayName": "Inner Corner Extension 2m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_Grip_8x4_C",
			"displayName": "Inner Corner Extension 4m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_PolishedConcrete_8x1_C",
			"displayName": "Inner Corner Extension 1m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_PolishedConcrete_8x2_C",
			"displayName": "Inner Corner Extension 2m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleInCorner_PolishedConcrete_8x4_C",
			"displayName": "Inner Corner Extension 4m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_Asphalt_4x1_C",
			"displayName": "Outer Corner Extension 1m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_Asphalt_4x2_C",
			"displayName": "Outer Corner Extension 2m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_Asphalt_4x4_C",
			"displayName": "Outer Corner Extension 4m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_Concrete_4x1_C",
			"displayName": "Outer Corner Extension 1m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_Concrete_4x2_C",
			"displayName": "Outer Corner Extension 2m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_Concrete_4x4_C",
			"displayName": "Outer Corner Extension 4m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_Ficsit_4x1_C",
			"displayName": "Outer Corner Extension 1m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_Ficsit_4x2_C",
			"displayName": "Outer Corner Extension 2m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_Ficsit_4x4_C",
			"displayName": "Outer Corner Extension 4m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_Grip_4x1_C",
			"displayName": "Outer Corner Extension 1m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_Grip_4x2_C",
			"displayName": "Outer Corner Extension 2m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_Grip_4x4_C",
			"displayName": "Outer Corner Extension 4m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_PolishedConcrete_4x1_C",
			"displayName": "Outer Corner Extension 1m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_PolishedConcrete_4x2_C",
			"displayName": "Outer Corner Extension 2m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeMiddleOutCorner_PolishedConcrete_4x4_C",
			"displayName": "Outer Corner Extension 4m",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 4m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeOutCorner_Asphalt_8x4_C",
			"displayName": "Outer Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeOutCorner_Concrete_8x4_C",
			"displayName": "Outer Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeOutCorner_ConcretePolished_8x4_C",
			"displayName": "Outer Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_QuarterPipeOutCorner_Grip_8x4_C",
			"displayName": "Outer Corner Quarter Pipe",
			"description": "Provides an optional factory look that is smoother and offers possibilities for recreational activities. \r\nStill utilizes the standard foundation building grid for improved building placement.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Diagonal_8x1_01_C",
			"displayName": "Down Corner Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Diagonal_8x1_02_C",
			"displayName": "Up Corner Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Diagonal_8x2_01_C",
			"displayName": "Down Corner Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Diagonal_8x2_02_C",
			"displayName": "Up Corner Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Diagonal_8x4_01_C",
			"displayName": "Down Corner Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Diagonal_8x4_02_C",
			"displayName": "Up Corner Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_DownCorner_Asphalt_8x1_C",
			"displayName": "Down Corner Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_DownCorner_Asphalt_8x2_C",
			"displayName": "Down Corner Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_DownCorner_Asphalt_8x4_C",
			"displayName": "Down Corner Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_DownCorner_Concrete_8x1_C",
			"displayName": "Down Corner Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_DownCorner_Concrete_8x2_C",
			"displayName": "Down Corner Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_DownCorner_Concrete_8x4_C",
			"displayName": "Down Corner Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_DownCorner_Metal_8x1_C",
			"displayName": "Down Corner Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_DownCorner_Metal_8x2_C",
			"displayName": "Down Corner Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_DownCorner_Metal_8x4_C",
			"displayName": "Down Corner Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_DownCorner_Polished_8x1_C",
			"displayName": "Down Corner Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_DownCorner_Polished_8x2_C",
			"displayName": "Down Corner Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_DownCorner_Polished_8x4_C",
			"displayName": "Down Corner Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_UpCorner_Asphalt_8x1_C",
			"displayName": "Up Corner Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_UpCorner_Asphalt_8x2_C",
			"displayName": "Up Corner Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_UpCorner_Asphalt_8x4_C",
			"displayName": "Up Corner Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_UpCorner_Concrete_8x1_C",
			"displayName": "Up Corner Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_UpCorner_Concrete_8x2_C",
			"displayName": "Up Corner Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_UpCorner_Concrete_8x4_C",
			"displayName": "Up Corner Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_UpCorner_Metal_8x1_C",
			"displayName": "Up Corner Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_UpCorner_Metal_8x2_C",
			"displayName": "Up Corner Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_UpCorner_Metal_8x4_C",
			"displayName": "Up Corner Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_UpCorner_Polished_8x1_C",
			"displayName": "Up Corner Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_UpCorner_Polished_8x2_C",
			"displayName": "Up Corner Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_UpCorner_Polished_8x4_C",
			"displayName": "Up Corner Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampInverted_8x1_Corner_01_C",
			"displayName": "Inv. Up Corner 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampInverted_8x1_Corner_02_C",
			"displayName": "Inv. Down Corner 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampInverted_8x2_Corner_01_C",
			"displayName": "Inv. Up Corner 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampInverted_8x2_Corner_02_C",
			"displayName": "Inv. Down Corner 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampInverted_8x4_Corner_01_C",
			"displayName": "Inv. Up Corner 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampInverted_8x4_Corner_02_C",
			"displayName": "Inv. Down Corner 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableFoundationLightweight",
			"displayName": "FGBuildableFoundationLightweight",
			"description": "",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_8x1_01_C",
			"displayName": "Foundation 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_8x2_01_C",
			"displayName": "Foundation 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_8x4_01_C",
			"displayName": "Foundation 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_Asphalt_8x1_C",
			"displayName": "Foundation 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_Asphalt_8x2_C",
			"displayName": "Foundation 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_Asphalt_8x4_C",
			"displayName": "Foundation 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_Concrete_8x1_C",
			"displayName": "Foundation 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_Concrete_8x2_C",
			"displayName": "Foundation 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_Concrete_8x4_C",
			"displayName": "Foundation 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_ConcretePolished_8x1_C",
			"displayName": "Foundation 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_ConcretePolished_8x2_2_C",
			"displayName": "Foundation 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_ConcretePolished_8x4_C",
			"displayName": "Foundation 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_Frame_01_C",
			"displayName": "Frame Foundation",
			"description": "Snaps to other structural buildings.\r\nFrames provide a more open factory aesthetic.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_Metal_8x1_C",
			"displayName": "Foundation 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_Metal_8x2_C",
			"displayName": "Foundation 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Foundation_Metal_8x4_C",
			"displayName": "Foundation 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_FoundationGlass_01_C",
			"displayName": "Glass Frame Foundation",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableFoundationLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableRamp",
			"displayName": "FGBuildableRamp",
			"description": "",
			"parent": "FGBuildableFoundation",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_Asphalt_8x1_C",
			"displayName": "Inv. Ramp 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_Asphalt_8x2_C",
			"displayName": "Inv. Ramp 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_Asphalt_8x4_C",
			"displayName": "Inv. Ramp 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_Concrete_8x1_C",
			"displayName": "Inv. Ramp 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_Concrete_8x2_C",
			"displayName": "Inv. Ramp 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_Concrete_8x4_C",
			"displayName": "Inv. Ramp 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_Metal_8x1_C",
			"displayName": "Inv. Ramp 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_Metal_8x2_C",
			"displayName": "Inv. Ramp 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_Metal_8x4_C",
			"displayName": "Inv. Ramp 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_Polished_8x1_C",
			"displayName": "Inv. Ramp 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_Polished_8x2_C",
			"displayName": "Inv. Ramp 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_InvertedRamp_Polished_8x4_C",
			"displayName": "Inv. Ramp 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_8x1_01_C",
			"displayName": "Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_8x2_01_C",
			"displayName": "Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_8x4_01_C",
			"displayName": "Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_8x4_Inverted_01_C",
			"displayName": "Inv. Ramp 4m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_8x8x8_C",
			"displayName": "Double Ramp 8m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Asphalt_8x1_C",
			"displayName": "Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Asphalt_8x2_C",
			"displayName": "Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Asphalt_8x4_C",
			"displayName": "Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Concrete_8x1_C",
			"displayName": "Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Concrete_8x2_C",
			"displayName": "Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Concrete_8x4_C",
			"displayName": "Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Frame_01_C",
			"displayName": "Frame Ramp",
			"description": "Snaps to other structural buildings.\r\nFrames provide a more open factory aesthetic.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Frame_Inverted_01_C",
			"displayName": "Inverted Frame Ramp",
			"description": "Snaps to other structural buildings.\r\nFrames provide a more open factory aesthetic.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Metal_8x1_C",
			"displayName": "Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Metal_8x2_C",
			"displayName": "Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Metal_8x4_C",
			"displayName": "Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Polished_8x1_C",
			"displayName": "Ramp 1m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Polished_8x2_C",
			"displayName": "Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ramp_Polished_8x4_C",
			"displayName": "Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_8x1_C",
			"displayName": "Double Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_Asphalt_8x1_C",
			"displayName": "Double Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_Asphalt_8x2_C",
			"displayName": "Double Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_Asphalt_8x4_C",
			"displayName": "Double Ramp 8m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_C",
			"displayName": "Double Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_Concrete_8x1_C",
			"displayName": "Double Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_Concrete_8x2_C",
			"displayName": "Double Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_Concrete_8x4_C",
			"displayName": "Double Ramp 8m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_Metal_8x1_C",
			"displayName": "Double Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_Metal_8x2_C",
			"displayName": "Double Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_Metal_8x4_C",
			"displayName": "Double Ramp 8m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_Polished_8x1_C",
			"displayName": "Double Ramp 2m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_Polished_8x2_C",
			"displayName": "Double Ramp 4m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampDouble_Polished_8x4_C",
			"displayName": "Double Ramp 8m",
			"description": "Snaps to foundations and makes it easier to get on top of them.\r\n\r\nBuildings on top of the ramp are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampInverted_8x1_C",
			"displayName": "Inv. Ramp 1m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RampInverted_8x2_01_C",
			"displayName": "Inv. Ramp 2m",
			"description": "Provides a flat floor to build your factory on.\r\n\r\nBuildings on top of the foundation are adjusted to a grid, to make it easier to line them up to each other.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_A_01_C",
			"displayName": "Roof Flat",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x flat",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_A_02_C",
			"displayName": "Roof 1m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_A_03_C",
			"displayName": "Roof 2m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_A_04_C",
			"displayName": "Roof 4m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Orange_01_C",
			"displayName": "Roof Flat",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x flat",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Orange_02_C",
			"displayName": "Roof 1m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Orange_03_C",
			"displayName": "Roof 2m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Orange_04_C",
			"displayName": "Roof 4m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Tar_01_C",
			"displayName": "Roof Flat",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x flat",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Tar_02_C",
			"displayName": "Roof 1m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Tar_03_C",
			"displayName": "Roof 2m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Tar_04_C",
			"displayName": "Roof 4m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Window_01_C",
			"displayName": "Roof Flat",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x flat",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Window_02_C",
			"displayName": "Roof 1m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Window_03_C",
			"displayName": "Roof 2m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Roof_Window_04_C",
			"displayName": "Roof 4m",
			"description": "Snaps to Foundations, Walls, and other Roofs.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableRamp",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePillar",
			"displayName": "FGBuildablePillar",
			"description": "",
			"parent": "FGBuildableFactoryBuilding",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePillarLightweight",
			"displayName": "FGBuildablePillarLightweight",
			"description": "",
			"parent": "FGBuildablePillar",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Pillar_Small_Concrete_C",
			"displayName": "Small Concrete Pillar",
			"description": "Snaps to other Pillars and can be placed on, for example, Foundations and Walls.\r\n\r\nSize: 2m x 4m",
			"parent": "FGBuildablePillarLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Pillar_Small_Frame_C",
			"displayName": "Small Frame Pillar",
			"description": "Snaps to other Pillars and can be placed on, for example, Foundations and Walls.\r\n\r\nSize: 2m x 4m",
			"parent": "FGBuildablePillarLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Pillar_Small_Metal_C",
			"displayName": "Small Metal Pillar",
			"description": "Snaps to other Pillars and can be placed on, for example, Foundations and Walls.\r\n\r\nSize: 2m x 4m",
			"parent": "FGBuildablePillarLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PillarBase_C",
			"displayName": "Big Pillar Support",
			"description": "The Pillar Support snaps to Pillars and can be placed on, for example, Foundations and Walls.",
			"parent": "FGBuildablePillarLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PillarBase_Small_C",
			"displayName": "Small Pillar Support",
			"description": "The Pillar Support snaps to Pillars and can be placed on, for example, Foundations and Walls.",
			"parent": "FGBuildablePillarLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PillarMiddle_C",
			"displayName": "Big Metal Pillar",
			"description": "Snaps to other Pillars and can be placed on, for example, Foundations and Walls.\r\n\r\nSize: 4m x 4m",
			"parent": "FGBuildablePillarLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PillarMiddle_Concrete_C",
			"displayName": "Big Concrete Pillar",
			"description": "Snaps to other Pillars and can be placed on, for example, Foundations and Walls.\r\n\r\nSize: 4m x 4m",
			"parent": "FGBuildablePillarLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PillarMiddle_Frame_C",
			"displayName": "Big Frame Pillar",
			"description": "Snaps to other Pillars and can be placed on, for example, Foundations and Walls.\r\n\r\nSize: 4m x 4m",
			"parent": "FGBuildablePillarLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PillarTop_C",
			"displayName": "Pillar Top",
			"description": "Pillar Top",
			"parent": "FGBuildablePillarLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableStair",
			"displayName": "FGBuildableStair",
			"description": "",
			"parent": "FGBuildableFactoryBuilding",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Stairs_Left_01_C",
			"displayName": "Stairs Left",
			"description": "Snaps to foundations.\r\nMakes it easier to get to other floors of your structures.",
			"parent": "FGBuildableStair",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Stairs_Right_01_C",
			"displayName": "Stairs Right",
			"description": "Snaps to foundations.\r\nMakes it easier to get to other floors of your structures.",
			"parent": "FGBuildableStair",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableWalkway",
			"displayName": "FGBuildableWalkway",
			"description": "",
			"parent": "FGBuildableFactoryBuilding",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableWalkwayLightweight",
			"displayName": "FGBuildableWalkwayLightweight",
			"description": "",
			"parent": "FGBuildableWalkway",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_CatwalkCorner_C",
			"displayName": "Catwalk Corner",
			"description": "Snaps to foundations and other walkways.\r\nSpecifically made for humans to walk on.",
			"parent": "FGBuildableWalkwayLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_CatwalkCross_C",
			"displayName": "Catwalk Crossing",
			"description": "Snaps to foundations and other walkways.\r\nSpecifically made for humans to walk on.",
			"parent": "FGBuildableWalkwayLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_CatwalkRamp_C",
			"displayName": "Catwalk Ramp",
			"description": "Snaps to foundations and other walkways.\r\nSpecifically made for humans to walk on.",
			"parent": "FGBuildableWalkwayLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_CatwalkStairs_C",
			"displayName": "Catwalk Stairs",
			"description": "Snaps to foundations and other walkways.\r\nSpecifically made for humans to walk on.",
			"parent": "FGBuildableWalkwayLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_CatwalkStraight_C",
			"displayName": "Catwalk Straight",
			"description": "Snaps to foundations and other walkways.\r\nSpecifically made for humans to walk on.",
			"parent": "FGBuildableWalkwayLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_CatwalkT_C",
			"displayName": "Catwalk T-Crossing",
			"description": "Snaps to foundations and other walkways.\r\nSpecifically made for humans to walk on.",
			"parent": "FGBuildableWalkwayLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_WalkwayCross_C",
			"displayName": "Walkway Crossing",
			"description": "Snaps to foundations and other walkways.\r\nSpecifically made for humans to walk on.",
			"parent": "FGBuildableWalkwayLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_WalkwayRamp_C",
			"displayName": "Walkway Ramp",
			"description": "Snaps to foundations and other walkways.\r\nSpecifically made for humans to walk on.",
			"parent": "FGBuildableWalkwayLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_WalkwayStraight_C",
			"displayName": "Walkway Straight",
			"description": "Snaps to foundations and other walkways.\r\nSpecifically made for humans to walk on.",
			"parent": "FGBuildableWalkwayLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_WalkwayT_C",
			"displayName": "Walkway T-Crossing",
			"description": "Snaps to foundations and other walkways.\r\nSpecifically made for humans to walk on.",
			"parent": "FGBuildableWalkwayLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_WalkwayTurn_C",
			"displayName": "Walkway Turn",
			"description": "Snaps to foundations and other walkways.\r\nSpecifically made for humans to walk on.",
			"parent": "FGBuildableWalkwayLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableWall",
			"displayName": "FGBuildableWall",
			"description": "",
			"parent": "FGBuildableFactoryBuilding",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_DoorMiddle_C",
			"displayName": "Build_DoorMiddle_C",
			"description": "",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_FlipTris_8x8_C",
			"displayName": "Inv. Ramp Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_8x4_ConveyorHole_02_C",
			"displayName": "Conveyor Wall x2",
			"description": "Has 2 Conveyor Belt connections.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_8x4_ConveyorHole_03_C",
			"displayName": "Conveyor Wall x3",
			"description": "Has 3 Conveyor Belt connections.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Conveyor_8x4_01_C",
			"displayName": "Conveyor Wall x3",
			"description": "Has 3 Conveyor Belt connections.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Conveyor_8x4_01_Steel_C",
			"displayName": "Conveyor Wall x3",
			"description": "Has 3 Conveyor Belt connections.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Conveyor_8x4_02_C",
			"displayName": "Conveyor Wall x2",
			"description": "Has 2 Conveyor Belt connections.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Conveyor_8x4_02_Steel_C",
			"displayName": "Conveyor Wall x2",
			"description": "Has 2 Conveyor Belt connections.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Conveyor_8x4_03_C",
			"displayName": "Conveyor Wall x1",
			"description": "Has 1 Conveyor Belt connection.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Conveyor_8x4_03_Steel_C",
			"displayName": "Conveyor Wall x1",
			"description": "Has 1 Conveyor Belt connections.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Conveyor_8x4_04_C",
			"displayName": "Wall Conveyor Perpendicular",
			"description": "Walls connect to other Walls and Floors. Use these to make buildings with several floors.\r\nHas 1 conveyor belt connection perpendicular to the wall.\r\nHeight: 4 m",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Conveyor_8x4_04_Steel_C",
			"displayName": "Wall Conveyor Perpendicular",
			"description": "Walls connect to other Walls and Floors. Use these to make buildings with several floors.\r\nHas 1 conveyor belt connection perpendicular to the wall.\r\nHeight: 4 m",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableDoor",
			"displayName": "FGBuildableDoor",
			"description": "",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Gate_Automated_8x4_C",
			"displayName": "Automated Gate",
			"description": "Automatically opens when living beings or vehicles approach it.\r\nGate settings can be configured.\r\nSnaps to foundations and other walls.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableDoor",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "BUILD_SingleDoor_Base_01_C",
			"displayName": "BUILD_SingleDoor_Base_01_C",
			"description": "",
			"parent": "FGBuildableDoor",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_8x4_DoorC_01_C",
			"displayName": "Basic Steel Wall",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.",
			"parent": "BUILD_SingleDoor_Base_01_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Door_8x4_01_Steel_C",
			"displayName": "Center Door Wall",
			"description": "The door allows Pioneers to pass through the wall.\r\nDoor settings can be configured.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "Build_SteelWall_8x4_DoorC_01_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_8x4_DoorS_01_C",
			"displayName": "Basic Steel Wall",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.",
			"parent": "BUILD_SingleDoor_Base_01_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Door_8x4_03_Steel_C",
			"displayName": "Side Door Wall",
			"description": "The door allows Pioneers to pass through the wall.\r\nDoor settings can be configured.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "Build_SteelWall_8x4_DoorS_01_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_CDoor_8x4_C",
			"displayName": "Center Door Wall",
			"description": "The door allows Pioneers to pass through the wall.\r\nDoor settings can be configured.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "BUILD_SingleDoor_Base_01_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_SDoor_8x4_C",
			"displayName": "Side Door Wall",
			"description": "The door allows Pioneers to pass through the wall.\r\nDoor settings can be configured.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "BUILD_SingleDoor_Base_01_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Door_8x4_01_C",
			"displayName": "Center Door Wall",
			"description": "The door allows Pioneers to pass through the wall.\r\nDoor settings can be configured.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "BUILD_SingleDoor_Base_01_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Door_8x4_02_Steel_C",
			"displayName": "Left Door Wall",
			"description": "Snaps to foundations and other walls.\r\nThe door allows Pioneers to pass through the wall.",
			"parent": "BUILD_SingleDoor_Base_01_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Door_8x4_03_C",
			"displayName": "Side Door Wall",
			"description": "The door allows Pioneers to pass through the wall.\r\nDoor settings can be configured.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "BUILD_SingleDoor_Base_01_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableWallLightweight",
			"displayName": "FGBuildableWallLightweight",
			"description": "",
			"parent": "FGBuildableWall",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Concrete_Barrier_01_C",
			"displayName": "Road Barrier",
			"description": "A concrete Barrier, used to create a safer working environment.",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Fence_01_C",
			"displayName": "Industrial Railing",
			"description": "Railings can be built on Foundations to create a safer working environment.",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Railing_01_C",
			"displayName": "Modern Railing",
			"description": "Railings can be built on Foundations to create a safer working environment.\r\n\r\nThis particular Railing is 4 meters long and angles automatically when built on Ramps.",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SM_RailingRamp_8x1_01_C",
			"displayName": "SM_RailingRamp_8x1_01",
			"description": "The Fence can be built on the edges of floors to prevent you from falling off.",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SM_RailingRamp_8x2_01_C",
			"displayName": "SM_RailingRamp_8x2_01",
			"description": "The Fence can be built on the edges of floors to prevent you from falling off.",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SM_RailingRamp_8x4_01_C",
			"displayName": "SM_RailingRamp_8x4_01",
			"description": "The Fence can be built on the edges of floors to prevent you from falling off.",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_8x1_C",
			"displayName": "Basic Wall 1m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_8x4_C",
			"displayName": "Tilted Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_8x4_Gate_01_C",
			"displayName": "Gate Hole Wall",
			"description": "The gate allows Pioneers to pass through the wall.\r\nSnaps to foundations and other walls.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_8x4_Window_01_C",
			"displayName": "Single Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_8x4_Window_02_C",
			"displayName": "Reinforced Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_8x4_Window_03_C",
			"displayName": "Frame Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_8x4_Window_04_C",
			"displayName": "Panel Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_FlipTris_8x1_C",
			"displayName": "Inv. Ramp Wall 1m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_FlipTris_8x2_C",
			"displayName": "Inv. Ramp Wall 2m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_FlipTris_8x4_C",
			"displayName": "Inv. Ramp Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_Tris_8x1_C",
			"displayName": "Ramp Wall 1m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_Tris_8x2_C",
			"displayName": "Ramp Wall 2m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_Tris_8x4_C",
			"displayName": "Ramp Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SteelWall_Tris_8x8_C",
			"displayName": "Ramp Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_8x4_01_C",
			"displayName": "Basic Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_8x4_02_C",
			"displayName": "Basic Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_8x1_C",
			"displayName": "Basic Wall 1m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_8x4_C",
			"displayName": "Basic Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_8x4_ConveyorHole_01_C",
			"displayName": "Conveyor Wall x1",
			"description": "Has 1 Conveyor Belt connection.\r\nSnaps to Foundations and other Walls.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_8x4_Window_01_C",
			"displayName": "Single Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_8x4_Window_02_C",
			"displayName": "Frame Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_8x4_Window_03_C",
			"displayName": "Panel Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_8x4_Window_04_C",
			"displayName": "Reinforced Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_Angular_8x4_C",
			"displayName": "Tilted Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_Angular_8x8_C",
			"displayName": "Tilted Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_FlipTris_8x1_C",
			"displayName": "Inv. Ramp Wall 1m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_FlipTris_8x2_C",
			"displayName": "Inv. Ramp Wall 2m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_FlipTris_8x4_C",
			"displayName": "Inv. Ramp Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_FlipTris_8x8_C",
			"displayName": "Inv. Ramp Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_Gate_8x4_C",
			"displayName": "Gate Hole Wall",
			"description": "The gate allows Pioneers to pass through the wall.\r\nSnaps to foundations and other walls.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_Tris_8x1_C",
			"displayName": "Ramp Wall 1m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_Tris_8x2_C",
			"displayName": "Ramp Wall 2m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_Tris_8x4_C",
			"displayName": "Ramp Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Concrete_Tris_8x8_C",
			"displayName": "Ramp Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Frame_01_C",
			"displayName": "Frame Wall",
			"description": "Snaps to other structural buildings.\r\nFrames provide a more open factory aesthetic.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Gate_8x4_01_C",
			"displayName": "Gate Hole Wall",
			"description": "The gate allows Pioneers to pass through the wall.\r\nSnaps to foundations and other walls.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_8x1_C",
			"displayName": "Basic Wall 1m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_Angular_8x4_C",
			"displayName": "Tilted Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_Angular_8x8_C",
			"displayName": "Tilted Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_FlipTris_8x1_C",
			"displayName": "Inv. Ramp Wall 1m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_FlipTris_8x2_C",
			"displayName": "Inv. Ramp Wall 2m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_FlipTris_8x4_C",
			"displayName": "Inv. Ramp Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_FlipTris_8x8_C",
			"displayName": "Inv. Ramp Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_Tris_8x1_C",
			"displayName": "Ramp Wall 1m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 1m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_Tris_8x2_C",
			"displayName": "Ramp Wall 2m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 2m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_Tris_8x4_C",
			"displayName": "Ramp Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Orange_Tris_8x8_C",
			"displayName": "Ramp Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Window_8x4_01_C",
			"displayName": "Single Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Window_8x4_02_C",
			"displayName": "Frame Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Window_8x4_03_C",
			"displayName": "Panel Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Window_8x4_04_C",
			"displayName": "Reinforced Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Window_Thin_8x4_01_C",
			"displayName": "Full Frame Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Wall_Window_Thin_8x4_02_C",
			"displayName": "Hex Frame Window",
			"description": "Snaps to Foundations and other Walls.\r\nThe windows allow Pioneers to see through the wall.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_WallSet_Steel_Angular_8x4_C",
			"displayName": "Tilted Wall 4m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 4m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_WallSet_Steel_Angular_8x8_C",
			"displayName": "Tilted Wall 8m",
			"description": "Snaps to foundations and other walls.\r\nUseful for building multi-floor structures.\r\n\r\nSize: 8m x 8m",
			"parent": "FGBuildableWallLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableHubTerminal",
			"displayName": "FGBuildableHubTerminal",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_HubTerminal_C",
			"displayName": "HUB Terminal",
			"description": "",
			"parent": "FGBuildableHubTerminal",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableLadder",
			"displayName": "FGBuildableLadder",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Ladder_C",
			"displayName": "Ladder",
			"description": "A ladder with a default height of 2 meters, which can be extended while building. Snaps to walls and foundations.",
			"parent": "FGBuildableLadder",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableMAM",
			"displayName": "FGBuildableMAM",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Mam_C",
			"displayName": "MAM",
			"description": "The Molecular Analysis Machine is used to analyse new and exotic materials found on alien planets.\r\nR&D will assist Pioneers through the MAM to turn any valuable data into usable research options and new technologies.",
			"parent": "FGBuildableMAM",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePassthrough",
			"displayName": "FGBuildablePassthrough",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_FoundationPassthrough_Hypertube_C",
			"displayName": "Hypertube Floor Hole",
			"description": "Can be attached to Foundations, allowing Hypertubes to pass through them.",
			"parent": "FGBuildablePassthrough",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_FoundationPassthrough_Lift_C",
			"displayName": "Conveyor Lift Floor Hole",
			"description": "Can be attached to Foundations, allowing Conveyor Lifts to pass through them.",
			"parent": "FGBuildablePassthrough",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_FoundationPassthrough_Pipe_C",
			"displayName": "Pipeline Floor Hole",
			"description": "Can be attached to Foundations, allowing Pipelines to pass through them.",
			"parent": "FGBuildablePassthrough",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePipeBase",
			"displayName": "FGBuildablePipeBase",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePipeHyper",
			"displayName": "FGBuildablePipeHyper",
			"description": "",
			"parent": "FGBuildablePipeBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipeHyper_C",
			"displayName": "Hypertube",
			"description": "Tubes for transporting FICSIT employees.\r\nA Hypertube Entrance needs to be attached to power and enter a Hypertube system.",
			"parent": "FGBuildablePipeHyper",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePipeline",
			"displayName": "FGBuildablePipeline",
			"description": "",
			"parent": "FGBuildablePipeBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Pipeline_C",
			"displayName": "Pipeline Mk.1",
			"description": "Outside indicators show volume, flow rate and direction.\r\nTransports up to 300m³ of fluid per minute.\r\nUsed to transport fluids.",
			"parent": "FGBuildablePipeline",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_Pipeline_NoIndicator_C",
			"displayName": "Pipeline Mk.1 (No Indicator)",
			"description": "Transports up to 300m³ of fluid per minute.\r\nUsed to transport fluids.\r\n\r\nCaution: This Pipeline version does not feature the external indicators.",
			"parent": "Build_Pipeline_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipelineMK2_C",
			"displayName": "Pipeline Mk.2",
			"description": "Outside indicators show volume, flow rate and direction.\r\nTransports up to 600m³ of fluid per minute.\r\nUsed to transport fluids.",
			"parent": "FGBuildablePipeline",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipelineMK2_NoIndicator_C",
			"displayName": "Pipeline Mk.2 (No Indicator)",
			"description": "Transports up to 600m³ of fluid per minute.\r\nUsed to transport fluids.\r\n\r\nCaution: This Pipeline version does not feature the external indicators.",
			"parent": "Build_PipelineMK2_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePipelineFlowIndicator",
			"displayName": "FGBuildablePipelineFlowIndicator",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipelineFlowIndicator_C",
			"displayName": "Build_PipelineFlowIndicator_C",
			"description": "",
			"parent": "FGBuildablePipelineFlowIndicator",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePoleBase",
			"displayName": "FGBuildablePoleBase",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePipelineSupport",
			"displayName": "FGBuildablePipelineSupport",
			"description": "",
			"parent": "FGBuildablePoleBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_HyperPoleStackable_C",
			"displayName": "Stackable Hypertube Support",
			"description": "Support for Hypertubes. Can be stacked on other stackable supports.",
			"parent": "FGBuildablePipelineSupport",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipeHyperSupport_C",
			"displayName": "Hypertube Support",
			"description": "Supports for Hypertubes to allow for longer distances.",
			"parent": "FGBuildablePipelineSupport",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipelineSupport_C",
			"displayName": "Pipeline Support",
			"description": "Can be used as a connection for pipelines. The height of the support can be adjusted.\r\nUseful to route pipelines in a more controlled manner and over long distances.",
			"parent": "FGBuildablePipelineSupport",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PipeSupportStackable_C",
			"displayName": "Stackable Pipeline Support",
			"description": "Support for pipelines. Can be stacked on other stackable supports.",
			"parent": "FGBuildablePipelineSupport",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePole",
			"displayName": "FGBuildablePole",
			"description": "",
			"parent": "FGBuildablePoleBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePoleLightweight",
			"displayName": "FGBuildablePoleLightweight",
			"description": "",
			"parent": "FGBuildablePole",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorPole_C",
			"displayName": "Conveyor Pole",
			"description": "Can be used as a connection for conveyor belts. The height of the pole can be adjusted.\r\nUseful to route conveyor belts in a more controlled manner and over long distances.",
			"parent": "FGBuildablePoleLightweight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGConveyorPoleStackable",
			"displayName": "FGConveyorPoleStackable",
			"description": "",
			"parent": "FGBuildablePole",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_ConveyorPoleStackable_C",
			"displayName": "Stackable Conveyor Pole",
			"description": "Support for conveyor belts. Can be stacked on other stackable supports.",
			"parent": "FGConveyorPoleStackable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableSignSupport",
			"displayName": "FGBuildableSignSupport",
			"description": "",
			"parent": "FGBuildablePoleBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SignPole_C",
			"displayName": "Build_SignPole_C",
			"description": "",
			"parent": "FGBuildableSignSupport",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildablePowerPole",
			"displayName": "FGBuildablePowerPole",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PowerPoleMk1_C",
			"displayName": "Power Pole Mk.1",
			"description": "Can handle up to 4 Power Line connections.\r\n\r\nConnect Power Poles, Power Generators and factory buildings together with Power Lines to create a power grid. The power grid supplies the connected buildings with power.",
			"parent": "FGBuildablePowerPole",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PowerPoleMk2_C",
			"displayName": "Power Pole Mk.2",
			"description": "Can handle up to 7 Power Line connections.\r\n\r\nConnect Power Poles, Power Generators and factory buildings together with Power Lines to create a power grid. The power grid supplies the connected buildings with power.",
			"parent": "Build_PowerPoleMk1_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PowerPoleMk3_C",
			"displayName": "Power Pole Mk.3",
			"description": "Can handle up to 10 Power Line connections.\r\n\r\nConnect Power Poles, Power Generators and factory buildings together with Power Lines to create a power grid. The power grid supplies the connected buildings with power.",
			"parent": "Build_PowerPoleMk1_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PowerPoleWall_C",
			"displayName": "Wall Outlet Mk.1",
			"description": "Power Pole that attaches to a wall.\r\n\r\nCan handle up to 4 Power Line connections.\r\n\r\nConnect Power Poles, Power Generators and factory buildings together with Power Lines to create a power grid. The power grid supplies the connected buildings with power.",
			"parent": "FGBuildablePowerPole",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PowerPoleWall_Mk2_C",
			"displayName": "Wall Outlet Mk.2",
			"description": "Power Pole that attaches to a wall.\r\n\r\nCan handle up to 7 Power Line connections.\r\n\r\nConnect Power Poles, Power Generators and factory buildings together with Power Lines to create a power grid. The power grid supplies the connected buildings with power.",
			"parent": "Build_PowerPoleWall_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PowerPoleWall_Mk3_C",
			"displayName": "Wall Outlet Mk.3",
			"description": "Power Pole that attaches to a wall.\r\n\r\nCan handle up to 10 Power Line connections.\r\n\r\nConnect Power Poles, Power Generators and factory buildings together with Power Lines to create a power grid. The power grid supplies the connected buildings with power.",
			"parent": "Build_PowerPoleWall_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PowerPoleWallDouble_C",
			"displayName": "Double Wall Outlet Mk.1",
			"description": "Power Pole that attaches to a wall. Has one connector on each side of the wall.\r\n\r\nCan handle up to 4 Power Line connections.\r\n\r\nConnect Power Poles, Power Generators and factory buildings together with Power Lines to create a power grid. The power grid supplies the connected buildings with power.",
			"parent": "FGBuildablePowerPole",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PowerPoleWallDouble_Mk2_C",
			"displayName": "Double Wall Outlet Mk.2",
			"description": "Power Pole that attaches to a wall. Has one connector on each side of the wall.\r\n\r\nCan handle up to 7 Power Line connections.\r\n\r\nConnect Power Poles, Power Generators and factory buildings together with Power Lines to create a power grid. The power grid supplies the connected buildings with power.",
			"parent": "Build_PowerPoleWallDouble_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PowerPoleWallDouble_Mk3_C",
			"displayName": "Double Wall Outlet Mk.3",
			"description": "Power Pole that attaches to a wall. Has one connector on each side of the wall.\r\n\r\nCan handle up to 10 Power Line connections.\r\n\r\nConnect Power Poles, Power Generators and factory buildings together with Power Lines to create a power grid. The power grid supplies the connected buildings with power.",
			"parent": "Build_PowerPoleWallDouble_Mk2_C",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableRailroadBridge",
			"displayName": "FGBuildableRailroadBridge",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableRoad",
			"displayName": "FGBuildableRoad",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableSnowDispenser",
			"displayName": "FGBuildableSnowDispenser",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_SnowDispenser_C",
			"displayName": "FICSMAS Snow Dispenser",
			"description": "Makes it snow!\r\nCan be attached to walls and ceilings.",
			"parent": "FGBuildableSnowDispenser",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableSpeedSign",
			"displayName": "FGBuildableSpeedSign",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableWire",
			"displayName": "FGBuildableWire",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_PowerLine_C",
			"displayName": "Power Line",
			"description": "Used to connect Power Poles, Power Generators and Factory buildings.",
			"parent": "FGBuildableWire",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_XmasLightsLine_C",
			"displayName": "FICSMAS Power Light",
			"description": "Used to connect Power Poles, Power Generators and Factory buildings. Has pretty lights to boot!",
			"parent": "FGBuildableWire",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FINComputerModule",
			"displayName": "FINComputerModule",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FINComputerDriveHolder",
			"displayName": "FINComputerDriveHolder",
			"description": "",
			"parent": "FINComputerModule",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "DriveHolder_C",
			"displayName": "Drive Holder",
			"description": "The FICSIT-Networks Drive holder allows you to add any hard drive to the computer system.\r\n\r\nThe drive will then be able to get mounted as root FS or to get added as device file to the FS, after that you wil be able to manually mount the drive to your desired location.",
			"parent": "FINComputerDriveHolder",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FINComputerGPU",
			"displayName": "FINComputerGPU",
			"description": "",
			"parent": "FINComputerModule",
			"properties": [],
			"functions": [],
			"signals": [
				{
					"internalName": "ScreenBound",
					"displayName": "ScreenBound",
					"description": "",
					"parameters": [
						{
							"internalName": "oldScreen",
							"displayName": "oldScreen",
							"description": "",
							"type":
							{
								"type": "Trace"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "GPUT1",
			"displayName": "Computer GPU T1",
			"description": "",
			"parent": "FINComputerGPU",
			"properties": [],
			"functions": [
				{
					"internalName": "setText",
					"displayName": "Set Text",
					"description": "Draws the given text at the given position to the hidden screen buffer.",
					"parameters": [
						{
							"internalName": "x",
							"displayName": "X",
							"description": "The x coordinate at which the text should get drawn.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "y",
							"displayName": "Y",
							"description": "The y coordinate at which the text should get drawn.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "str",
							"displayName": "String",
							"description": "The text you want to draw on-to the buffer.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setSize",
					"displayName": "Set Size",
					"description": "Changes the size of the text-grid (and buffer).",
					"parameters": [
						{
							"internalName": "w",
							"displayName": "Width",
							"description": "The width of the text-gird.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "h",
							"displayName": "Height",
							"description": "The height of the text-grid.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setForeground",
					"displayName": "Set Foreground Color",
					"description": "Changes the foreground color that is used for the next draw calls.",
					"parameters": [
						{
							"internalName": "r",
							"displayName": "Red",
							"description": "The red portion of the foreground color. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "g",
							"displayName": "Green",
							"description": "The green portion of the foreground color. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "b",
							"displayName": "Blue",
							"description": "The blue portion of the foreground color. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "a",
							"displayName": "Alpha",
							"description": "The opacity of the foreground color. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setBuffer",
					"displayName": "Set Buffer",
					"description": "Allows to change the back buffer of the GPU to the given buffer.",
					"parameters": [
						{
							"internalName": "buffer",
							"displayName": "Buffer",
							"description": "The Buffer you want to now use as back buffer.",
							"type":
							{
								"type": "Struct",
								"inner": "GPUT1Buffer"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setBackground",
					"displayName": "Set Background Color",
					"description": "Changes the background color that is used for the next draw calls.",
					"parameters": [
						{
							"internalName": "r",
							"displayName": "Red",
							"description": "The red portion of the background color. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "g",
							"displayName": "Green",
							"description": "The green portion of the background color. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "b",
							"displayName": "Blue",
							"description": "The blue portion of the background color. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "a",
							"displayName": "Alpha",
							"description": "The opacity of the background color. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getSize",
					"displayName": "Get Size",
					"description": "Returns the size of the text-grid (and buffer).",
					"parameters": [
						{
							"internalName": "w",
							"displayName": "Width",
							"description": "The width of the text-gird.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "h",
							"displayName": "Height",
							"description": "The height of the text-grid.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getScreen",
					"displayName": "Get Screen",
					"description": "Returns the currently bound screen.",
					"parameters": [
						{
							"internalName": "screen",
							"displayName": "Screen",
							"description": "The currently bound screen.",
							"type":
							{
								"type": "Object",
								"subclass": "Object"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getBuffer",
					"displayName": "Get Buffer",
					"description": "Returns the back buffer as struct to be able to use advanced buffer handling functions. (struct is a copy)",
					"parameters": [
						{
							"internalName": "buffer",
							"displayName": "Buffer",
							"description": "The Buffer that is currently the back buffer.",
							"type":
							{
								"type": "Struct",
								"inner": "GPUT1Buffer"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "flush",
					"displayName": "Flush",
					"description": "Flushes the hidden screen buffer to the visible screen buffer and so makes the draw calls visible.",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "fill",
					"displayName": "Fill",
					"description": "Draws the given character at all given positions in the given rectangle on-to the hidden screen buffer.",
					"parameters": [
						{
							"internalName": "x",
							"displayName": "X",
							"description": "The x coordinate at which the rectangle should get drawn. (upper-left corner)",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "y",
							"displayName": "Y",
							"description": "The y coordinate at which the rectangle should get drawn. (upper-left corner)",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "dx",
							"displayName": "DX",
							"description": "The width of the rectangle.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "dy",
							"displayName": "DY",
							"description": "The height of the rectangle.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "str",
							"displayName": "String",
							"description": "The character you want to use for the rectangle. (first char in the given string)",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "bindScreen",
					"displayName": "Bind Screen",
					"description": "Binds this GPU to the given screen. Unbinds the already bound screen.",
					"parameters": [
						{
							"internalName": "newScreen",
							"displayName": "New Screen",
							"description": "The screen you want to bind this GPU to. Null if you want to unbind the screen.",
							"type":
							{
								"type": "Trace"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "ScreenSizeChanged",
					"displayName": "Screen Size Changed",
					"description": "Triggers when the size of the text grid changed.",
					"parameters": [
						{
							"internalName": "oldW",
							"displayName": "old Width",
							"description": "The old width of the screen.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "oldH",
							"displayName": "old Height",
							"description": "The old height of the screen.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				},
				{
					"internalName": "OnMouseUp",
					"displayName": "On Mouse Up",
					"description": "Triggers when a mouse button got released.",
					"parameters": [
						{
							"internalName": "x",
							"displayName": "X",
							"description": "The x position of the cursor.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "y",
							"displayName": "Y",
							"description": "The y position of the cursor.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "btn",
							"displayName": "Button",
							"description": "The Button-Bit-Field providing information about the released button event.\nBits:\n1th left mouse pressed\n2th right mouse button pressed\n3th ctrl key pressed\n4th shift key pressed\n5th alt key pressed\n6th cmd key pressed",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				},
				{
					"internalName": "OnMouseMove",
					"displayName": "On Mouse Move",
					"description": "Triggers when the mouse cursor moves on the screen.",
					"parameters": [
						{
							"internalName": "x",
							"displayName": "X",
							"description": "The x position of the cursor.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "y",
							"displayName": "Y",
							"description": "The y position of the cursor.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "btn",
							"displayName": "Button",
							"description": "The Button-Bit-Field providing information about the move event.\nBits:\n1th left mouse pressed\n2th right mouse button pressed\n3th ctrl key pressed\n4th shift key pressed\n5th alt key pressed\n6th cmd key pressed",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				},
				{
					"internalName": "OnMouseDown",
					"displayName": "On Mouse Down",
					"description": "Triggers when a mouse button got pressed.",
					"parameters": [
						{
							"internalName": "x",
							"displayName": "X",
							"description": "The x position of the cursor.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "y",
							"displayName": "Y",
							"description": "The y position of the cursor.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "btn",
							"displayName": "Button",
							"description": "The Button-Bit-Field providing information about the pressed button event.\nBits:\n1th left mouse pressed\n2th right mouse button pressed\n3th ctrl key pressed\n4th shift key pressed\n5th alt key pressed\n6th cmd key pressed",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				},
				{
					"internalName": "OnKeyUp",
					"displayName": "On Key Up",
					"description": "Triggers when a key got released.",
					"parameters": [
						{
							"internalName": "c",
							"displayName": "C",
							"description": "The ASCII number of the character typed in.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "code",
							"displayName": "Code",
							"description": "The number code of the pressed key.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "btn",
							"displayName": "Button",
							"description": "The Button-Bit-Field providing information about the key release event.\nBits:\n1th left mouse pressed\n2th right mouse button pressed\n3th ctrl key pressed\n4th shift key pressed\n5th alt key pressed\n6th cmd key pressed",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				},
				{
					"internalName": "OnKeyDown",
					"displayName": "On Key Down",
					"description": "Triggers when a key got pressed.",
					"parameters": [
						{
							"internalName": "c",
							"displayName": "C",
							"description": "The ASCII number of the character typed in.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "code",
							"displayName": "Code",
							"description": "The number code of the pressed key.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "btn",
							"displayName": "Button",
							"description": "The Button-Bit-Field providing information about the key press event.\nBits:\n1th left mouse pressed\n2th right mouse button pressed\n3th ctrl key pressed\n4th shift key pressed\n5th alt key pressed\n6th cmd key pressed",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				},
				{
					"internalName": "OnKeyChar",
					"displayName": "On Key Character",
					"description": "Triggers when a character key got 'clicked' and essentially a character got typed in, useful for text input.",
					"parameters": [
						{
							"internalName": "c",
							"displayName": "Character",
							"description": "The character that got typed in as string.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "btn",
							"displayName": "Button",
							"description": "The Button-Bit-Field providing information about the key release event.\nBits:\n1th left mouse pressed\n2th right mouse button pressed\n3th ctrl key pressed\n4th shift key pressed\n5th alt key pressed\n6th cmd key pressed",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "GPU_T1_C",
			"displayName": "Graphical Processing Unit T1",
			"description": "The FICSIT-Networks GPU T1 allows you to render a character grid onto any kind of screen.\r\n\r\nEach character of this grid can be colored as you want as well as the background of each character.\r\n\r\nYou can also change the resolution to up to 150x50 characters.\r\n\r\nThe GPU also implements some signals allowing you to interact with the graphics more easily via keyboard, mouse and even touch.",
			"parent": "GPUT1",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FINComputerMemory",
			"displayName": "FINComputerMemory",
			"description": "",
			"parent": "FINComputerModule",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "RAM_T1_C",
			"displayName": "RAM T1",
			"description": "This is 100kB of amazing FICSIT-Networks Memory.\r\n\r\nYou can add multiple of the memory bars to your PC and so you can extend the memory of your PC.\r\n\r\nYou always need to hove enough memory because FICSIT doesn't allow out of memory exceptions and if you bring a computer to throw one, you will loose one month of payment.",
			"parent": "FINComputerMemory",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FINComputerProcessor",
			"displayName": "FINComputerProcessor",
			"description": "",
			"parent": "FINComputerModule",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FINComputerProcessorLua",
			"displayName": "FINComputerProcessorLua",
			"description": "",
			"parent": "FINComputerProcessor",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "CPU_Lua_C",
			"displayName": "CPU T1 (Lua)",
			"description": "This CPU is from the FICSIT-Lua series and allows you to program the PC with Lua.\r\n\r\nYou can only place one CPU per PC.\r\n\r\nYou are required to have at least one CPU per PC to run it. FICSIT does not allow unused PC Cases to get build.",
			"parent": "FINComputerProcessorLua",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FINComputerScreen",
			"displayName": "FINComputerScreen",
			"description": "",
			"parent": "FINComputerModule",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "ScreenDriver_C",
			"displayName": "Screen Driver",
			"description": "The FICSIT-Networks Screen Driver allows you to add a screen display to the UI of the computer case you build this module into.\r\n\r\nYou can then use the computer API to get a reference to the screen and so you can bind the screen to a GPU.",
			"parent": "FINComputerScreen",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FINInternetCard",
			"displayName": "FINInternetCard",
			"description": "",
			"parent": "FINComputerModule",
			"properties": [],
			"functions": [
				{
					"internalName": "request",
					"displayName": "Request",
					"description": "Does an HTTP-Request. If a payload is given, the Content-Type header has to be set. All additional parameters have to be strings and in pairs of two for defining the http headers and values.",
					"parameters": [
						{
							"internalName": "url",
							"displayName": "URL",
							"description": "The URL for which you want to make an HTTP Request.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "method",
							"displayName": "Method",
							"description": "The http request method/verb you want to make the request. f.e. 'GET', 'POST'",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "data",
							"displayName": "Data",
							"description": "The http request payload you want to sent.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "ReturnValue",
							"displayName": "ReturnValue",
							"description": "",
							"type":
							{
								"type": "Struct",
								"inner": "Future"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": true,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "InternetCard_C",
			"displayName": "Internet Card",
			"description": "A Internet Card!",
			"parent": "FINInternetCard",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "NetworkCard",
			"displayName": "Network Card",
			"description": "",
			"parent": "FINComputerModule",
			"properties": [],
			"functions": [
				{
					"internalName": "send",
					"displayName": "Send Message",
					"description": "Sends a network message to the receiver with the given address on the given port. The data you want to add can be passed as additional parameters. Max amount of such parameters is 7 and they can only be nil, booleans, numbers and strings.",
					"parameters": [
						{
							"internalName": "receiver",
							"displayName": "Receiver",
							"description": "The component ID as string of the component you want to send the network message to.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "port",
							"displayName": "Port",
							"description": "The port on which the network message should get sent. For outgoing network messages a port does not need to be opened.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": true,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "open",
					"displayName": "Open Port",
					"description": "Opens the given port so the network card is able to receive network messages on the given port.",
					"parameters": [
						{
							"internalName": "port",
							"displayName": "Port",
							"description": "The port you want to open.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "closeAll",
					"displayName": "Close All Ports",
					"description": "Closes all ports of the network card so no further messages are able to get received",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "close",
					"displayName": "Close Port",
					"description": "Closes the given port so the network card wont receive network messages on the given port.",
					"parameters": [
						{
							"internalName": "port",
							"displayName": "Port",
							"description": "The port you want to close.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "broadcast",
					"displayName": "Broadcast Message",
					"description": "Sends a network message to all components in the network message network (including networks seperated by network routers) on the given port. The data you want to add can be passed as additional parameters. Max amount of such parameters is 7 and they can only be nil, booleans, numbers and strings.",
					"parameters": [
						{
							"internalName": "port",
							"displayName": "Port",
							"description": "The port on which the network message should get sent. For outgoing network messages a port does not need to be opened.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": true,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "NetworkMessage",
					"displayName": "Network Message",
					"description": "Triggers when the network card receives a network message on one of its opened ports. The additional arguments are the data that is contained within the network message.",
					"parameters": [
						{
							"internalName": "sender",
							"displayName": "Sender",
							"description": "The component id of the sender of the network message.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "port",
							"displayName": "Port",
							"description": "The port on which the network message got sent.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": true
				}
			]
		},
		{
			"internalName": "NetworkCard_C",
			"displayName": "Network Card",
			"description": "The FICSIT-Networks Network Card allows you to send network messages to other network cards in the same computer network.\r\n\r\nYou can use unicast and broadcast messages to share information between multiple different computers in the same network.\r\n\r\nThis is the best and easiest way for you to communicate between multiple computers.\r\n\r\nIf you want to receive network messages, make sure you also open the according port, since every message is associated with a port allowing for better filtering.",
			"parent": "NetworkCard",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FINModularIndicatorPoleModule",
			"displayName": "FINModularIndicatorPoleModule",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [
				{
					"internalName": "getPrevious",
					"displayName": "Get Previous",
					"description": "Gets the previous module or the base mount if this called from the last module.",
					"parameters": [
						{
							"internalName": "previous",
							"displayName": "Previous module",
							"description": "The previous module or base mount.",
							"type":
							{
								"type": "Object",
								"subclass": "FGBuildable"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getNext",
					"displayName": "Get Next",
					"description": "Returns the next pole module if any.",
					"parameters": [
						{
							"internalName": "next",
							"displayName": "Next module",
							"description": "The next module in this chain.",
							"type":
							{
								"type": "Object",
								"subclass": "FINModularIndicatorPoleModule"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "ModularIndicatorPole",
			"displayName": "Modular Indicator Pole",
			"description": "FICSIT Indicator Module for FICSIT Modular Indicator Poles provides pioneers with the most fundamental indicator. The new and improved incandescent RGB bulb provides versatility to the industrious. Each modules color and intensity can be set via the network by a computer.",
			"parent": "FINModularIndicatorPoleModule",
			"properties": [],
			"functions": [
				{
					"internalName": "getColor",
					"displayName": "getColor",
					"description": "",
					"parameters": [
						{
							"internalName": "FLinearColor",
							"displayName": "FLinearColor",
							"description": "",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "FINModuleBase",
			"displayName": "FINModuleBase",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FINModuleScreen",
			"displayName": "FINModuleScreen",
			"description": "",
			"parent": "FINModuleBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "ModuleScreen_C",
			"displayName": "Screen Module",
			"description": "This Screen Module for modular I/O Panels allows you to show graphics a GPU renders and to interact with it.\r\n\r\nYou can use the instance of the module to bind it to a GPU. The screen will then display the graphics the GPU renders. If you just look at the screen with the crosshair you will trigger the GPUs OnMouseMove events or if you event click with the right of left mouse button while doing so, you can also trigger the MouseDown and MouseUp events.",
			"parent": "FINModuleScreen",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "IndicatorModule",
			"displayName": "Indicator Module",
			"description": "Indicator Module for panels",
			"parent": "FINModuleBase",
			"properties": [],
			"functions": [
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "LargeMicroDisplayModule",
			"displayName": "Large Micro Display Module",
			"description": "Provides a relatively small text only display for Control Panels. \r\nText height is fixed, but text is squeezed to fit horizontally.",
			"parent": "FINModuleBase",
			"properties": [],
			"functions": [
				{
					"internalName": "setText",
					"displayName": "setText",
					"description": "",
					"parameters": [
						{
							"internalName": "Text",
							"displayName": "Text",
							"description": "",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "MCP_Mod_2Pos_Switch_C",
			"displayName": "Illuminable 2 Position Switch",
			"description": "This Switch Module for modular I/O Panels is used to toggle between a true and false value. It has an illuminable spot on the knob and you can use them to trigger specific programmed events.",
			"parent": "FINModuleBase",
			"properties": [
				{
					"internalName": "state",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "ChangeState",
					"displayName": "ChangeState",
					"description": "",
					"parameters": [
						{
							"internalName": "State2",
							"displayName": "State2",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "MCP_Mod_3Pos_Switch_C",
			"displayName": "Illuminable 3 Position Switch",
			"description": "This Switch Module for modular I/O Panels is used to toggle between three different settings. It has an illuminable spot on the knob and you can use them to trigger specific programmed events.",
			"parent": "FINModuleBase",
			"properties": [
				{
					"internalName": "state",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "ChangeState",
					"displayName": "ChangeState",
					"description": "",
					"parameters": [
						{
							"internalName": "State2",
							"displayName": "State2",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "MCP_Mod_Encoder_C",
			"displayName": "Encoder",
			"description": "This Potentiometer Module allows for input of a value with infinite range, this because it only fires how much the value changed since last, not how much it is at.",
			"parent": "FINModuleBase",
			"properties": [],
			"functions": [
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "valueChanged",
					"displayName": "valueChanged",
					"description": "",
					"parameters": [
						{
							"internalName": "Value",
							"displayName": "Value",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "MCP_Mod_Gauge_C",
			"displayName": "Mini Gauge",
			"description": "A small analogue Gauge for use on Micro Enclosures. The red portion and needle position can be changed through FIN",
			"parent": "FINModuleBase",
			"properties": [
				{
					"internalName": "limit",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "percent",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setBackgroundColor",
					"displayName": "setBackgroundColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "MCP_Mod_Plug_C",
			"displayName": "Plug/Spacer",
			"description": "This Button Module for modular I/O Panels can have different knob color and brightnesses and you can use them to trigger specific programmed events.",
			"parent": "FINModuleBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "MCP_Mod_Potentiometer_C",
			"displayName": "Potentiometer",
			"description": "This Potentiometer Module allows for input of a fixed value range and fires a signal with the new value each time the internal counter changes.",
			"parent": "FINModuleBase",
			"properties": [
				{
					"internalName": "value",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "max",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "min",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "valueChanged",
					"displayName": "valueChanged",
					"description": "",
					"parameters": [
						{
							"internalName": "Value",
							"displayName": "Value",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "MCP_Mod_PotWNum_C",
			"displayName": "Potentiometer with Readout",
			"description": "This Potentiometer Module allows for input of a fixed value range and fires a signal with the new value each time the internal counter changes. This version has a readout display on it.",
			"parent": "FINModuleBase",
			"properties": [
				{
					"internalName": "autovalue",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "value",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "max",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "min",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setText",
					"displayName": "setText",
					"description": "",
					"parameters": [
						{
							"internalName": "Text",
							"displayName": "Text",
							"description": "",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "valueChanged",
					"displayName": "valueChanged",
					"description": "",
					"parameters": [
						{
							"internalName": "Value",
							"displayName": "Value",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "MicroDisplayModule",
			"displayName": "Micro Display Module",
			"description": "Provides a small text only display for Control Panels. \r\nCan display up to 3 digits, One additional dot may be used.",
			"parent": "FINModuleBase",
			"properties": [],
			"functions": [
				{
					"internalName": "setText",
					"displayName": "setText",
					"description": "",
					"parameters": [
						{
							"internalName": "Text",
							"displayName": "Text",
							"description": "",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Module_BigGauge_C",
			"displayName": "Big Gauge",
			"description": "A medium analogue Gauge for use on Large Panels. The red portion and needle position can be changed through FIN",
			"parent": "FINModuleBase",
			"properties": [
				{
					"internalName": "limit",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "percent",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setBackgroundColor",
					"displayName": "setBackgroundColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Module_Label_1x1_C",
			"displayName": "Label 1x1",
			"description": "Label is just a module for placing a label onto the panel",
			"parent": "FINModuleBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Module_Label_2x1_C",
			"displayName": "Label 2x1",
			"description": "Label is just a module for placing a label onto the panel",
			"parent": "FINModuleBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "ModuleButton",
			"displayName": "Module Button",
			"description": "This Button Module for modular I/O Panels can have different knob color and brightnesses and you can use them to trigger specific programmed events.",
			"parent": "FINModuleBase",
			"properties": [],
			"functions": [
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "trigger",
					"displayName": "Trigger",
					"description": "Triggers a button press by code.",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "Trigger",
					"displayName": "Trigger",
					"description": "Triggers when the button gets pressed.",
					"parameters": [],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "ModulePotentiometer",
			"displayName": "Module Potentiometer",
			"description": "The Potentiometer Module for the Modular I/O Control Panel allows you to have rotation input value for you programs.\r\n\r\nYou can rotate it indefinitely into any direction where every rotation triggers a computer network signal.",
			"parent": "FINModuleBase",
			"properties": [],
			"functions": [
				{
					"internalName": "rotate",
					"displayName": "rotate",
					"description": "",
					"parameters": [
						{
							"internalName": "AntiClockwise",
							"displayName": "AntiClockwise",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "PotRotate",
					"displayName": "PotRotate",
					"description": "",
					"parameters": [
						{
							"internalName": "AntiClockwise",
							"displayName": "AntiClockwise",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "ModuleStopButton",
			"displayName": "Module Stop Button",
			"description": "This Stop Button Module for the modular I/O Panel is used to trigger important programmable events.",
			"parent": "FINModuleBase",
			"properties": [],
			"functions": [
				{
					"internalName": "trigger",
					"displayName": "Trigger",
					"description": "Triggers a button press by code.",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "Trigger",
					"displayName": "Triggers when the button gets pressed.",
					"description": "Triggers when the button gets pressed.",
					"parameters": [],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "ModuleSwitch_C",
			"displayName": "Lever Module",
			"description": "The Lever Module for the modular I/O Panel is used to switch a programm state between two different value (on or off).",
			"parent": "FINModuleBase",
			"properties": [
				{
					"internalName": "state",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": [
				{
					"internalName": "ChangeState",
					"displayName": "ChangeState",
					"description": "",
					"parameters": [
						{
							"internalName": "State",
							"displayName": "State",
							"description": "",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "ModuleTextDisplay_C",
			"displayName": "Text Display",
			"description": "The FICSIT-Networks Text-Display Module for the Modular Control Panel is a simple GPU and Screen combined!\r\n\r\nIt allows you to display any kind of text with different font sizes and you can even switch between two fonts!\r\n\r\nBut you can't interact with it, nor change the background/foreground color as you can do with a GPU.",
			"parent": "FINModuleBase",
			"properties": [
				{
					"internalName": "monospace",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "size",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "text",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "String"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "MushroomPushbuttonModule",
			"displayName": "Mushroom Pushbutton Module",
			"description": "This Mushroom Button Module for modular I/O Panels can have different knob color and brightnesses and you can use them to trigger specific programmed events.",
			"parent": "FINModuleBase",
			"properties": [],
			"functions": [
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "trigger",
					"displayName": "Triggers a button press by code.",
					"description": "Triggers a button press by code.",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "Trigger",
					"displayName": "Triggers a button press by code.",
					"description": "Triggers a button press by code.",
					"parameters": [],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "PushbuttonModule",
			"displayName": "Pushbutton Module",
			"description": "This Button Module for modular I/O Panels can have different knob color and brightnesses and you can use them to trigger specific programmed events.",
			"parent": "FINModuleBase",
			"properties": [],
			"functions": [
				{
					"internalName": "setColor",
					"displayName": "setColor",
					"description": "",
					"parameters": [
						{
							"internalName": "red",
							"displayName": "red",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "green",
							"displayName": "green",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "blue",
							"displayName": "blue",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Emit",
							"displayName": "Emit",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "trigger",
					"displayName": "Triggers a button press by code.",
					"description": "Triggers a button press by code.",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "Trigger",
					"displayName": "Triggers a button press by code.",
					"description": "Triggers a button press by code.",
					"parameters": [],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "FINNetworkAdapter",
			"displayName": "FINNetworkAdapter",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "BP_NetworkAdapter_C",
			"displayName": "Network Adapter",
			"description": "",
			"parent": "FINNetworkAdapter",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FINNetworkCable",
			"displayName": "FINNetworkCable",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "NetworkCable_C",
			"displayName": "Network Cable",
			"description": "The FICSIT-Networks Network Cable allows you to connect your network components wich each other.\r\n\r\nThis is the core process of building up your own computer network.\r\n\r\nYou can connect this cable via two a two step placement procedure to two network connectors, or, if the component/machine/whatever doesn't have a network connector, it will try to create add a network adapter to the machine to still allow you to connect it to your network.",
			"parent": "FINNetworkCable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "ThinNetworkCable_C",
			"displayName": "Thin Network Cable",
			"description": "The FICSIT-Networks Thin Network Cable allows you to connect your network panels wich each other more gracefully.\r\n\r\nThis cable works just like the normal network cable except it can only connect between MCP panels and Small Network Plugs.\r\n\r\nYou can then connect Normal/Large Network Cables to those Small Network Plugs to be able to connect your MCP Panels with a computer.",
			"parent": "FINNetworkCable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FINSizeablePanel",
			"displayName": "FINSizeablePanel",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "SizeableModulePanel",
			"displayName": "Sizeable Module Panel",
			"description": "This panel allows for dynamic sizing. For placing on walls.",
			"parent": "FINSizeablePanel",
			"properties": [],
			"functions": [
				{
					"internalName": "getModules",
					"displayName": "getModules",
					"description": "",
					"parameters": [
						{
							"internalName": "modules",
							"displayName": "modules",
							"description": "",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Object",
									"subclass": "Object"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getModule",
					"displayName": "getModule",
					"description": "",
					"parameters": [
						{
							"internalName": "X",
							"displayName": "X",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Y",
							"displayName": "Y",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Module",
							"displayName": "Module",
							"description": "",
							"type":
							{
								"type": "Object",
								"subclass": "Actor"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "FINWirelessAccessPoint",
			"displayName": "FINWirelessAccessPoint",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "WirelessAccessPoint_C",
			"displayName": "Wireless Access Point",
			"description": "The Ficsit Networks Wireless Access Point allows you to connect a circuit to the Ficsit Wireless Area Network (FWAN), which uses Radio Towers frequencies to create a messaging network over the planet.\r\n \r\nIt should be connected to a Radio Tower, then all network messages received will be broadcasted to all other Wireless Access Points across the map.",
			"parent": "FINWirelessAccessPoint",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "IndicatorPole",
			"displayName": "Indicator Pole",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [
				{
					"internalName": "setColor",
					"displayName": "Set Color",
					"description": "Allows to change the color and light intensity of the indicator lamp.",
					"parameters": [
						{
							"internalName": "r",
							"displayName": "Red",
							"description": "The red part of the color in which the light glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "g",
							"displayName": "Green",
							"description": "The green part of the color in which the light glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "b",
							"displayName": "Blue",
							"description": "The blue part of the color in which the light glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "e",
							"displayName": "Emissivity",
							"description": "The light intensity of the pole. (0.0 - 5.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTopPole",
					"displayName": "Get Top Pole",
					"description": "Allows to get the pole placed on top of this pole.",
					"parameters": [
						{
							"internalName": "topPole",
							"displayName": "Top Pole",
							"description": "The pole placed on top of this pole.",
							"type":
							{
								"type": "Object",
								"subclass": "IndicatorPole"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getColor",
					"displayName": "Get Color",
					"description": "Allows to get the color and light intensity of the indicator lamp.",
					"parameters": [
						{
							"internalName": "r",
							"displayName": "Red",
							"description": "The red part of the color in which the light glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "g",
							"displayName": "Green",
							"description": "The green part of the color in which the light glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "b",
							"displayName": "Blue",
							"description": "The blue part of the color in which the light glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "e",
							"displayName": "Emissivity",
							"description": "The light intensity of the pole. (0.0 - 5.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getBottomPole",
					"displayName": "getBottomPole",
					"description": "",
					"parameters": [
						{
							"internalName": "ReturnValue",
							"displayName": "ReturnValue",
							"description": "",
							"type":
							{
								"type": "Object",
								"subclass": "IndicatorPole"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "ColorChanged",
					"displayName": "Color Changed",
					"description": "Triggers when the color of the indicator pole changes.",
					"parameters": [
						{
							"internalName": "r",
							"displayName": "Red",
							"description": "The red part of the color in which the light glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "g",
							"displayName": "Green",
							"description": "The green part of the color in which the light glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "b",
							"displayName": "Blue",
							"description": "The blue part of the color in which the light glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "e",
							"displayName": "Emissivity",
							"description": "The light intensity of the pole. (0.0 - 5.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "IndicatorPole_C",
			"displayName": "Indicator Pole",
			"description": "The FICSIT-Networks indicator light allows you to determine by the looks of from far away the state of a machine or program.\r\n\r\nIt has dynamic height, is stack able and you can control the color of it via accessing it from the computer network.",
			"parent": "IndicatorPole",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Item_SmallNetworkWallPlug_C",
			"displayName": "Small Network Wall Plug",
			"description": "This FICSIT-Networks Small Wall Plug allows you to connect the thin network cable only usable with MCH panels and other small components.\r\n\r\nYou can then connect Normal/Large Network Cables to those Small Network Plugs to be able to connect your MCP Panels and such to a computer.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "LargeControlPanel",
			"displayName": "Large Control Panel",
			"description": "This large modular I/O control panel allows you to attach multiple different modules on to it and use them as I/O to control you programms.\r\n\r\nYou can connect it to the FICSIT-Network.\r\n\r\nImportant to note is that every module is it's own component, that means if you want to listen to the signals, you will need to listen to each of them individually.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [
				{
					"internalName": "getModules",
					"displayName": "getModules",
					"description": "",
					"parameters": [
						{
							"internalName": "modules",
							"displayName": "modules",
							"description": "",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Object",
									"subclass": "Object"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getModule",
					"displayName": "getModule",
					"description": "",
					"parameters": [
						{
							"internalName": "X",
							"displayName": "X",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Y",
							"displayName": "Y",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Module",
							"displayName": "Module",
							"description": "",
							"type":
							{
								"type": "Object",
								"subclass": "Actor"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "LargeVerticalControlPanel",
			"displayName": "Large Vertical Control Panel",
			"description": "This large vertical modular I/O control panel allows you to attach multiple different modules on to it and use them as I/O to control you programms.\r\n\r\nYou can connect it to the FICSIT-Network.\r\n\r\nImportant to note is that every module is it's own component, that means if you want to listen to the signals, you will need to listen to each of them individually.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [
				{
					"internalName": "getModules",
					"displayName": "getModules",
					"description": "",
					"parameters": [
						{
							"internalName": "modules",
							"displayName": "modules",
							"description": "",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Object",
									"subclass": "Object"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getModule",
					"displayName": "getModule",
					"description": "",
					"parameters": [
						{
							"internalName": "X",
							"displayName": "X",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Y",
							"displayName": "Y",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Panel",
							"displayName": "Panel",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Module",
							"displayName": "Module",
							"description": "",
							"type":
							{
								"type": "Object",
								"subclass": "Actor"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "LightSource",
			"displayName": "Light Source",
			"description": "The base class for all light you can build.",
			"parent": "FGBuildable",
			"properties": [
				{
					"internalName": "isLightEnabled",
					"displayName": "Is Light Enabled",
					"description": "True if the light is enabled",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isTimeOfDayAware",
					"displayName": "Is Time of Day Aware",
					"description": "True if the light should automatically turn on and off depending on the time of the day.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "intensity",
					"displayName": "Intensity",
					"description": "The intensity of the light.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "colorSlot",
					"displayName": "Color Slot",
					"description": "The color slot the light uses.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getColorFromSlot",
					"displayName": "Get Color from Slot",
					"description": "Returns the light color that is referenced by the given slot.",
					"parameters": [
						{
							"internalName": "slot",
							"displayName": "Slot",
							"description": "The slot you want to get the referencing color from.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "color",
							"displayName": "Color",
							"description": "The color this slot references.",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setColorFromSlot",
					"displayName": "Set Color from Slot",
					"description": "Allows to update the light color that is referenced by the given slot.",
					"parameters": [
						{
							"internalName": "slot",
							"displayName": "Slot",
							"description": "The slot you want to update the referencing color for.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "color",
							"displayName": "Color",
							"description": "The color this slot should now reference.",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Build_CeilingLight_C",
			"displayName": "Ceiling Light",
			"description": "Can be placed on ceilings to light up indoor factory spaces.\r\n\r\nLight color and intensity can be modified.\r\nAllows up to two Power Line connections.",
			"parent": "LightSource",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StreetLight_C",
			"displayName": "Street Light",
			"description": "A small Street Light, perfect for lighting up factory pathways and roads.\r\n\r\nLight color and intensity can be modified.\r\nAllows up to two Power Line connections.",
			"parent": "LightSource",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FGBuildableFloodlight",
			"displayName": "FGBuildableFloodlight",
			"description": "",
			"parent": "LightSource",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_FloodlightPole_C",
			"displayName": "Flood Light Tower",
			"description": "A tall light tower, specifically designed for illuminating large or outdoor spaces.\r\n\r\nLight color and intensity can be modified.\r\nAllows up to two Power Line connections.",
			"parent": "FGBuildableFloodlight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_FloodlightWall_C",
			"displayName": "Wall Mounted Flood Light",
			"description": "Can be attached to Walls and Foundations to illuminate large spaces.\r\n\r\nLight color and intensity can be modified.\r\nAllows up to two Power Line connections.",
			"parent": "FGBuildableFloodlight",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "ModularIndicatorPole",
			"displayName": "Modular Indicator Pole",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [
				{
					"internalName": "getNext",
					"displayName": "Get Next",
					"description": "Returns the next pole module if any.",
					"parameters": [
						{
							"internalName": "next",
							"displayName": "Next module",
							"description": "The next module in this chain.",
							"type":
							{
								"type": "Object",
								"subclass": "Actor"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getModule",
					"displayName": "Get Module",
					"description": "Gets the module at the given position in the stack",
					"parameters": [
						{
							"internalName": "module",
							"displayName": "Module",
							"description": "The module at the given offset in the stack or nil if none",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "index",
							"displayName": "Module Offset",
							"description": "The index in the stack, 0 being the first module",
							"type":
							{
								"type": "Object",
								"subclass": "Actor"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Build_ModularIndicatorPole_C",
			"displayName": "Modular Indicator Pole",
			"description": "The Modular FICSIT Indicator Pole allows busy pioneers to check on the status of machines, factories and much more from a long distance far away. To express the status you can stack individual modules. FICSIT invested more money to make the indicator pole suitable for every situation by allowing it to be placed on walls, floors and beams with a dynamic orientation and even dynamic height.",
			"parent": "ModularIndicatorPole",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "ModulePanel",
			"displayName": "ModulePanel",
			"description": "Enclosure for 1 command points",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [
				{
					"internalName": "getYModule",
					"displayName": "getYModule",
					"description": "",
					"parameters": [
						{
							"internalName": "Y",
							"displayName": "Y",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Module",
							"displayName": "Module",
							"description": "",
							"type":
							{
								"type": "Object",
								"subclass": "Actor"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getXModule",
					"displayName": "getXModule",
					"description": "",
					"parameters": [
						{
							"internalName": "X",
							"displayName": "X",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Module",
							"displayName": "Module",
							"description": "",
							"type":
							{
								"type": "Object",
								"subclass": "Actor"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getModules",
					"displayName": "getModules",
					"description": "",
					"parameters": [
						{
							"internalName": "modules",
							"displayName": "modules",
							"description": "",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Object",
									"subclass": "Object"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getModule",
					"displayName": "getModule",
					"description": "",
					"parameters": [
						{
							"internalName": "X",
							"displayName": "X",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Y",
							"displayName": "Y",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "Module",
							"displayName": "Module",
							"description": "",
							"type":
							{
								"type": "Object",
								"subclass": "Actor"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "MCP_1Point_C",
			"displayName": "Micro Control Panel 1 Point",
			"description": "Enclosure for 1 command points.\r\n\r\nThese Micro Control Panels can be used through out your factory and allow you to have an easier look on the state of your factory and they allow you to control your factory more easily.\r\n\r\nYou can fully customize the control panels with buttons lights etc.",
			"parent": "ModulePanel",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "MCP_1Point_Center_C",
			"displayName": "Micro Control Panel 1 C-Point",
			"description": "Micro Control Panel for 1 command point, center placement.\r\n\r\nThese Micro Control Panels can be used through out your factory and allow you to have an easier look on the state of your factory and they allow you to control your factory more easily.\r\n\r\nYou can fully customize the control panels with buttons lights etc.",
			"parent": "ModulePanel",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "MCP_2Point_C",
			"displayName": "Micro Control Panel 2 Point",
			"description": "Enclosure for 2 command points.\r\n\r\nThese Micro Control Panels can be used through out your factory and allow you to have an easier look on the state of your factory and they allow you to control your factory more easily.\r\n\r\nYou can fully customize the control panels with buttons lights etc.",
			"parent": "ModulePanel",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "MCP_3Point_C",
			"displayName": "Micro Control Panel 3 Point",
			"description": "Enclosure for 3 command points.\r\n\r\nThese Micro Control Panels can be used through out your factory and allow you to have an easier look on the state of your factory and they allow you to control your factory more easily.\r\n\r\nYou can fully customize the control panels with buttons lights etc.",
			"parent": "ModulePanel",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "MCP_6Point_C",
			"displayName": "Micro Control Panel 6 Point",
			"description": "Enclosure for 6 command points.\r\n\r\nThese Micro Control Panels can be used through out your factory and allow you to have an easier look on the state of your factory and they allow you to control your factory more easily.\r\n\r\nYou can fully customize the control panels with buttons lights etc.",
			"parent": "ModulePanel",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "NetworkPole_C",
			"displayName": "Network Pole",
			"description": "This Pole allows you to connect multiple network components to it via the network cables.\r\n\r\nThis is a essential building for spreading your computer network into the whole landscape.\r\n\r\nIt basically allows you to digitalize the world!",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "NetworkRouter",
			"displayName": "Network Router",
			"description": "",
			"parent": "FGBuildable",
			"properties": [
				{
					"internalName": "isWhitelist",
					"displayName": "Unknown FINBase",
					"description": "",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": true,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isAddrWhitelist",
					"displayName": "Is Address Whitelist",
					"description": "True if the address filter list is used as whitelist.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": true,
					"Flag_RetVal": true,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "setPortList",
					"displayName": "Set Port List",
					"description": "Overrides the port filter list with the given array.",
					"parameters": [
						{
							"internalName": "ports",
							"displayName": "Ports",
							"description": "The port array you want to override the filter list with.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Int"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setAddrList",
					"displayName": "Set Address List",
					"description": "Overrides the address filter list with the given array.",
					"parameters": [
						{
							"internalName": "addresses",
							"displayName": "Addresses",
							"description": "The address array you want to override the filter list with.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "String"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "removePortList",
					"displayName": "Remove Port from List",
					"description": "Removes the given port from the port filter list.",
					"parameters": [
						{
							"internalName": "port",
							"displayName": "Port",
							"description": "The port you want to remove from the list.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "removeAddrList",
					"displayName": "Remove Address from List",
					"description": "Removes the given address from the address filter list.",
					"parameters": [
						{
							"internalName": "addr",
							"displayName": "Address",
							"description": "The address you want to remove from the list.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getPortList",
					"displayName": "Get Port List",
					"description": "Allows to get all the ports of the port filter list as array.",
					"parameters": [
						{
							"internalName": "ports",
							"displayName": "Ports",
							"description": "The port array of the filter list.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Int"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getAddrList",
					"displayName": "Get Address List",
					"description": "Allows to get all the addresses of the address filter list as array.",
					"parameters": [
						{
							"internalName": "addresses",
							"displayName": "Addresses",
							"description": "The address array of the filter list.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "String"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "addPortList",
					"displayName": "Add Port to List",
					"description": "Adds a given port to the port filter list.",
					"parameters": [
						{
							"internalName": "port",
							"displayName": "Port",
							"description": "The port you want to add to the list.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "addAddrList",
					"displayName": "addAddrList",
					"description": "",
					"parameters": [
						{
							"internalName": "addr",
							"displayName": "addr",
							"description": "",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "NetworkRouter_C",
			"displayName": "Network Router",
			"description": "The FICSIT-Networks Network Router allows you to separate two different component network from each other.\r\nBut it still lets network messages sent by network cards through.\r\nThis allows for better networking capabilities, faster networking (can reduce game lag) and makes working with larger networks and multiple computer more easy.\r\n\r\nThe router also provides a couple of functions which allow you to create filters for ports and message senders.",
			"parent": "NetworkRouter",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "NetworkWallPlug_C",
			"displayName": "Network Wall Plug",
			"description": "This FICSIT-Networks Wall Plug allows you to distribute a network circuit more easily near buildings and indoors.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "NetworkWallPlug_Double_C",
			"displayName": "Network Wall Plug (Double)",
			"description": "This FICSIT-Networks Wall Plug allows you to pass a network circuit through a wall, allowing for more ease of use of the network cables.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "RailroadSignal",
			"displayName": "Railroad Signal",
			"description": "A train signal to control trains on a track.",
			"parent": "FGBuildable",
			"properties": [
				{
					"internalName": "isPathSignal",
					"displayName": "Is Path Signal",
					"description": "True if this signal is a path-signal.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isBiDirectional",
					"displayName": "Is Bi-Directional",
					"description": "True if this signal is bi-directional. (trains can pass into both directions)",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "hasObservedBlock",
					"displayName": "Has Observed Block",
					"description": "True if this signal is currently observing at least one block.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "blockValidation",
					"displayName": "Block Validation",
					"description": "Any error states of the block.\n0 = Unknown\n1 = No Error\n2 = No Exit Signal\n3 = Contains Loop\n4 = Contains Mixed Entry Signals",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "aspect",
					"displayName": "Aspect",
					"description": "The aspect of the signal. The aspect shows if a train is allowed to pass (clear) or not and if it should dock.\n0 = Unknown\n1 = The track is clear and the train is allowed to pass.\n2 = The next track is Occupied and the train should stop\n3 = The train should dock.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getObservedBlock",
					"displayName": "Get Observed Block",
					"description": "Returns the track block this signals observes.",
					"parameters": [
						{
							"internalName": "block",
							"displayName": "Block",
							"description": "The railroad signal block this signal is observing.",
							"type":
							{
								"type": "Struct",
								"inner": "RailroadSignalBlock"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "AspectChanged",
					"displayName": "Aspect Changed",
					"description": "Triggers when the aspect of this signal changes.",
					"parameters": [
						{
							"internalName": "aspect",
							"displayName": "Aspect",
							"description": "The new aspect of the signal (see 'Get Aspect' for more information)",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "Build_RailroadBlockSignal_C",
			"displayName": "Block Signal",
			"description": "Train Signals are used to direct the movement of Trains to avoid collisions and bottlenecks.\r\n\r\nBlock Signals can be placed on Railways to create 'Blocks' between each other. When a Train is occupying such a Block, other Trains will be unable to enter it.\r\n\r\nCaution: Signals are directional! Trains are unable to move against this direction, so be sure to set up Signals in both directions for bi-directional Railways.",
			"parent": "RailroadSignal",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RailroadPathSignal_C",
			"displayName": "Path Signal",
			"description": "Train Signals are used to direct the movement of Trains to avoid collisions and bottlenecks.\r\n\r\nPath Signals are advanced signals that are especially useful for bi-directional Railways and complex intersections. They function similarly to Block Signals but rather than occupying the entire Block, Trains can reserve a specific path through it and will only enter the Block if their path allows them to fully pass through it.\r\n\r\nCaution: Signals are directional! Trains are unable to move against this direction, so be sure to set up Signals in both directions for bi-directional Railways.",
			"parent": "RailroadSignal",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "RailroadTrack",
			"displayName": "Railroad Track",
			"description": "A piece of railroad track over which trains can drive.",
			"parent": "FGBuildable",
			"properties": [
				{
					"internalName": "length",
					"displayName": "Length",
					"description": "The length of the track.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isOwnedByPlatform",
					"displayName": "Is Owned By Platform",
					"description": "True if the track is part of/owned by a railroad platform.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getClosestTrackPosition",
					"displayName": "Get Closest Track Position",
					"description": "Returns the closes track position from the given world position",
					"parameters": [
						{
							"internalName": "worldPos",
							"displayName": "World Pos",
							"description": "The world position form which you want to get the closest track position.",
							"type":
							{
								"type": "Struct",
								"inner": "Vector"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "track",
							"displayName": "Track",
							"description": "The track the track pos points to.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadTrack"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "offset",
							"displayName": "Offset",
							"description": "The offset of the track pos.",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "forward",
							"displayName": "Forward",
							"description": "The forward direction of the track pos. 1 = with the track direction, -1 = against the track direction",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getWorldLocAndRotAtPos",
					"displayName": "Get World Location And Rotation At Position",
					"description": "Returns the world location and world rotation of the track position from the given track position.",
					"parameters": [
						{
							"internalName": "track",
							"displayName": "Track",
							"description": "The track the track pos points to.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadTrack"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "offset",
							"displayName": "Offset",
							"description": "The offset of the track pos.",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "forward",
							"displayName": "Forward",
							"description": "The forward direction of the track pos. 1 = with the track direction, -1 = against the track direction",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "location",
							"displayName": "Location",
							"description": "The location at the given track position",
							"type":
							{
								"type": "Struct",
								"inner": "Vector"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "rotation",
							"displayName": "Rotation",
							"description": "The rotation at the given track position (forward vector)",
							"type":
							{
								"type": "Struct",
								"inner": "Vector"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getConnection",
					"displayName": "Get Connection",
					"description": "Returns the railroad track connection at the given direction.",
					"parameters": [
						{
							"internalName": "direction",
							"displayName": "Direction",
							"description": "The direction of which you want to get the connector from. 0 = front, 1 = back",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "connection",
							"displayName": "Connection",
							"description": "The connection component in the given direction.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadTrackConnection"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTrackGraph",
					"displayName": "Get Track Graph",
					"description": "Returns the track graph of which this track is part of.",
					"parameters": [
						{
							"internalName": "track",
							"displayName": "Track",
							"description": "The track graph of which this track is part of.",
							"type":
							{
								"type": "Struct",
								"inner": "TrackGraph"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Build_RailroadTrack_C",
			"displayName": "Railway",
			"description": "Used to transport trains in a reliable and fast manner.\r\nHas a wide turn angle so make sure to plan it out properly.",
			"parent": "RailroadTrack",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_RailroadTrackIntegrated_C",
			"displayName": "Integrated Platform Track",
			"description": "",
			"parent": "RailroadTrack",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Screen",
			"displayName": "Screen",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [
				{
					"internalName": "getSize",
					"displayName": "Get Size",
					"description": "Returns the size of the screen in 'panels'.",
					"parameters": [
						{
							"internalName": "width",
							"displayName": "Width",
							"description": "The width of the screen.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "height",
							"displayName": "Height",
							"description": "The height of the screen.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Build_Screen_C",
			"displayName": "Large Screen",
			"description": "The FICSIT-Networks large screen allows you to display anything a GPU can render onto a huge plane.\r\n\r\nYou can also interact with the monitor by locking at it and also by clicking on it.",
			"parent": "Screen",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "SignBase",
			"displayName": "Sign Base",
			"description": "The base class for all signs in the game.",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [
				{
					"internalName": "getSignType",
					"displayName": "Get Sign Type",
					"description": "Returns the sign type descriptor",
					"parameters": [
						{
							"internalName": "descriptor",
							"displayName": "Descriptor",
							"description": "The sign type descriptor",
							"type":
							{
								"type": "Class",
								"subclass": "SignType"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "FGBuildablePixelSign",
			"displayName": "FGBuildablePixelSign",
			"description": "",
			"parent": "SignBase",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "WidgetSign",
			"displayName": "Widget Sign",
			"description": "The type of sign that allows you to define layouts, images, texts and colors manually.",
			"parent": "SignBase",
			"properties": [],
			"functions": [
				{
					"internalName": "setPrefabSignData",
					"displayName": "Set Prefab Sign Data",
					"description": "Sets the prefabg [?] sign data e.g. the user settings like colo [colon?] and more to define the signs content.",
					"parameters": [
						{
							"internalName": "prefabSignData",
							"displayName": "Prefab Sign Data",
							"description": "The new prefab sign data for this sign.",
							"type":
							{
								"type": "Struct",
								"inner": "PrefabSignData"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getPrefabSignData",
					"displayName": "Get Prefab Sign Data",
					"description": "Returns the prefabg [?] sign data e.g. the user settings like colo [colon?] and more to define the signs content.",
					"parameters": [
						{
							"internalName": "prefabSignData",
							"displayName": "Prefab Sign Data",
							"description": "The new prefab sign data for this sign.",
							"type":
							{
								"type": "Struct",
								"inner": "PrefabSignData"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Build_StandaloneWidgetSign_Huge_C",
			"displayName": "Large Billboard",
			"description": "Signs can be customized with different elements, such as icons and text, to improve factory organization.\r\n\r\nCan be placed freely, on Walls, or attached to a variety of buildings, such as Storage Containers.\r\n\r\nSize: 16m x 8m",
			"parent": "WidgetSign",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StandaloneWidgetSign_Large_C",
			"displayName": "Small Billboard",
			"description": "Signs can be customized with different elements, such as icons and text, to improve factory organization.\r\n\r\nCan be placed freely, on Walls, or attached to a variety of buildings, such as Storage Containers.\r\n\r\nSize: 8m x 4m",
			"parent": "WidgetSign",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StandaloneWidgetSign_Medium_C",
			"displayName": "Display Sign",
			"description": "Signs can be customized with different elements, such as icons and text, to improve factory organization.\r\n\r\nCan be placed freely, on Walls, or attached to a variety of buildings, such as Storage Containers.\r\n\r\nSize: 2m x 1m",
			"parent": "WidgetSign",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StandaloneWidgetSign_Portrait_C",
			"displayName": "Portrait Sign",
			"description": "Signs can be customized with different elements, such as icons and text, to improve factory organization.\r\n\r\nCan be placed freely, on Walls, or attached to a variety of buildings, such as Storage Containers.\r\n\r\nSize: 2m x 3m",
			"parent": "WidgetSign",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StandaloneWidgetSign_Small_C",
			"displayName": "Label Sign 2m",
			"description": "Signs can be customized with different elements, such as icons and text, to improve factory organization.\r\n\r\nCan be placed freely, on Walls, or attached to a variety of buildings, such as Storage Containers.\r\n\r\nSize: 2m x 0.5m",
			"parent": "WidgetSign",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StandaloneWidgetSign_SmallVeryWide_C",
			"displayName": "Label Sign 4m",
			"description": "Signs can be customized with different elements, such as icons and text, to improve factory organization.\r\n\r\nCan be placed freely, on Walls, or attached to a variety of buildings, such as Storage Containers.\r\n\r\nSize: 4m x 0.5m",
			"parent": "WidgetSign",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StandaloneWidgetSign_SmallWide_C",
			"displayName": "Label Sign 3m",
			"description": "Signs can be customized with different elements, such as icons and text, to improve factory organization.\r\n\r\nCan be placed freely, on Walls, or attached to a variety of buildings, such as Storage Containers.\r\n\r\nSize: 3m x 0.5m",
			"parent": "WidgetSign",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StandaloneWidgetSign_Square_C",
			"displayName": "Square Sign 2m",
			"description": "Signs can be customized with different elements, such as icons and text, to improve factory organization.\r\n\r\nCan be placed freely, on Walls, or attached to a variety of buildings, such as Storage Containers.\r\n\r\nSize: 2m x 2m",
			"parent": "WidgetSign",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StandaloneWidgetSign_Square_Small_C",
			"displayName": "Square Sign 1m",
			"description": "Signs can be customized with different elements, such as icons and text, to improve factory organization.\r\n\r\nCan be placed freely, on Walls, or attached to a variety of buildings, such as Storage Containers.\r\n\r\nSize: 1m x 1m",
			"parent": "WidgetSign",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Build_StandaloneWidgetSign_Square_Tiny_C",
			"displayName": "Square Sign 0.5m",
			"description": "Signs can be customized with different elements, such as icons and text, to improve factory organization.\r\n\r\nCan be placed freely, on Walls, or attached to a variety of buildings, such as Storage Containers.\r\n\r\nSize: 0.5m x 0.5m",
			"parent": "WidgetSign",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "SpeakerPole",
			"displayName": "Speaker Pole",
			"description": "This speaker pole allows to play custom sound files, In-Game",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [
				{
					"internalName": "stopSound",
					"displayName": "Stop Sound",
					"description": "Stops the currently playing sound file.",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "playSound",
					"displayName": "Play Sound",
					"description": "Plays a custom sound file in-game",
					"parameters": [
						{
							"internalName": "sound",
							"displayName": "Sound",
							"description": "The sound file (without the file ending) you want to play",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "startPoint",
							"displayName": "Start Point",
							"description": "The start point in seconds at which the system should start playing",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "SpeakerSound",
					"displayName": "SpeakerSound",
					"description": "Triggers when the sound play state of the speaker pole changes.",
					"parameters": [
						{
							"internalName": "type",
							"displayName": "Type",
							"description": "The type of the speaker pole event.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "sound",
							"displayName": "Sound",
							"description": "The sound file including in the event.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "Speakers_C",
			"displayName": "Speaker-Pole",
			"description": "The FICSIT-Networks speaker pole is a network component which allows you to use one more sense of the pioneers to give commands to them or to just make ambient better.\r\n\r\nThe speaker pole can play sound files located in the Computer Folder \"/Sounds\" in your Satisfactory Save-Games-Folder. The FICSIT-Networks speaker pole is only able to play .ogg files cause FICSIT Inc. has the opinion other file formates are useless.",
			"parent": "SpeakerPole",
			"properties": [],
			"functions": [
				{
					"internalName": "setVolume",
					"displayName": "setVolume",
					"description": "",
					"parameters": [
						{
							"internalName": "Volume",
							"displayName": "Volume",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setRange",
					"displayName": "setRange",
					"description": "",
					"parameters": [
						{
							"internalName": "Range",
							"displayName": "Range",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getVolume",
					"displayName": "getVolume",
					"description": "",
					"parameters": [
						{
							"internalName": "Volume",
							"displayName": "Volume",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getRange",
					"displayName": "getRange",
					"description": "",
					"parameters": [
						{
							"internalName": "Range",
							"displayName": "Range",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "SpeakerSetting",
					"displayName": "SpeakerSetting",
					"description": "",
					"parameters": [
						{
							"internalName": "setting",
							"displayName": "setting",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "New",
							"displayName": "New",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "OLD",
							"displayName": "OLD",
							"description": "",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "VehicleScanner",
			"displayName": "Vehicle Scanner",
			"description": "",
			"parent": "FGBuildable",
			"properties": [],
			"functions": [
				{
					"internalName": "setColor",
					"displayName": "Set Color",
					"description": "Allows to change the color and light intensity of the scanner.",
					"parameters": [
						{
							"internalName": "r",
							"displayName": "Red",
							"description": "The red part of the color in which the scanner glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "g",
							"displayName": "Green",
							"description": "The green part of the color in which the scanner glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "b",
							"displayName": "Blue",
							"description": "The blue part of the color in which the scanner glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "e",
							"displayName": "Emissivity",
							"description": "The light intensity of the scanner. (0.0 - 5.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getLastVehicle",
					"displayName": "Get Last Vehicle",
					"description": "Returns the last vehicle that entered the scanner.",
					"parameters": [
						{
							"internalName": "vehicle",
							"displayName": "Vehicle",
							"description": "The vehicle that entered the scanner. null if it has already left the scanner.",
							"type":
							{
								"type": "Object",
								"subclass": "Vehicle"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": true,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getColor",
					"displayName": "Get Color",
					"description": "Allows to get the color and light intensity of the scanner.",
					"parameters": [
						{
							"internalName": "r",
							"displayName": "Red",
							"description": "The red part of the color in which the scanner glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "g",
							"displayName": "Green",
							"description": "The green part of the color in which the scanner glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "b",
							"displayName": "Blue",
							"description": "The blue part of the color in which the scanner glows. (0.0 - 1.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "e",
							"displayName": "Emissivity",
							"description": "The light intensity of the scanner. (0.0 - 5.0)",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "OnVehicleExit",
					"displayName": "On Vehicle Exit",
					"description": "Triggers when a vehicle leaves the scanner.",
					"parameters": [
						{
							"internalName": "vehicle",
							"displayName": "Vehicle",
							"description": "The vehicle that left the scanner.",
							"type":
							{
								"type": "Object",
								"subclass": "Vehicle"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				},
				{
					"internalName": "OnVehicleEnter",
					"displayName": "On Vehicle Enter",
					"description": "Triggers when a vehicle enters the scanner.",
					"parameters": [
						{
							"internalName": "vehicle",
							"displayName": "Vehicle",
							"description": "The vehicle that entered the scanner.",
							"type":
							{
								"type": "Object",
								"subclass": "Vehicle"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "VehicleScanner_C",
			"displayName": "Vehicle Scanner",
			"description": "The FICSIT-Networks Vehicle Scanner allows you to communicate with vehicles driving over the scanner.\r\n\r\nYou can also get notified when a vehicle enters or leaves the scanner.",
			"parent": "VehicleScanner",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "TargetList",
			"displayName": "Target List",
			"description": "The list of targets/path-waypoints a autonomous vehicle can drive",
			"parent": "Actor",
			"properties": [],
			"functions": [
				{
					"internalName": "getTarget",
					"displayName": "Get Target",
					"description": "Returns the target struct at with the given index in the target list.",
					"parameters": [
						{
							"internalName": "target",
							"displayName": "Target",
							"description": "The TargetPoint-Struct with the given index in the target list.",
							"type":
							{
								"type": "Struct",
								"inner": "TargetPoint"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "removeTarget",
					"displayName": "Remove Target",
					"description": "Removes the target with the given index from the target list.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The index of the target point you want to remove from the target list.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "addTarget",
					"displayName": "Add Target",
					"description": "Adds the given target point struct at the end of the target list.",
					"parameters": [
						{
							"internalName": "target",
							"displayName": "Target",
							"description": "The target point you want to add.",
							"type":
							{
								"type": "Struct",
								"inner": "TargetPoint"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setTarget",
					"displayName": "Set Target",
					"description": "Allows to set the target at the given index to the given target point struct.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The index of the target point you want to update with the given target point struct.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "target",
							"displayName": "Target",
							"description": "The new target point struct for the given index.",
							"type":
							{
								"type": "Struct",
								"inner": "TargetPoint"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTargets",
					"displayName": "Get Targets",
					"description": "Returns a list of target point structs of all the targets in the target point list.",
					"parameters": [
						{
							"internalName": "targets",
							"displayName": "Targets",
							"description": "A list of target point structs containing all the targets of the target point list.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Struct",
									"inner": "TargetPoint"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setTargets",
					"displayName": "Set Targets",
					"description": "Removes all targets from the target point list and adds the given array of target point structs to the empty target point list.",
					"parameters": [
						{
							"internalName": "targets",
							"displayName": "Targets",
							"description": "A list of target point structs you want to place into the empty target point list.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Struct",
									"inner": "TargetPoint"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "TimeTable",
			"displayName": "Time Table",
			"description": "Contains the time table information of train.",
			"parent": "Actor",
			"properties": [
				{
					"internalName": "numStops",
					"displayName": "Num Stops",
					"description": "The current number of stops in the time table.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "addStop",
					"displayName": "Add Stop",
					"description": "Adds a stop to the time table.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The index at which the stop should get added.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "station",
							"displayName": "Station",
							"description": "The railroad station at which the stop should happen.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadStation"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "ruleSet",
							"displayName": "Rule Set",
							"description": "The docking rule set that describes when the train will depart from the station.",
							"type":
							{
								"type": "Struct",
								"inner": "TrainDockingRuleSet"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "added",
							"displayName": "Added",
							"description": "True if the stop got successfully added to the time table.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "removeStop",
					"displayName": "Remove Stop",
					"description": "Removes the stop with the given index from the time table.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The index at which the stop should get added.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getStops",
					"displayName": "Get Stops",
					"description": "Returns a list of all the stops this time table has",
					"parameters": [
						{
							"internalName": "stops",
							"displayName": "Stops",
							"description": "A list of time table stops this time table has.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Struct",
									"inner": "TimeTableStop"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setStops",
					"displayName": "Set Stops",
					"description": "Allows to empty and fill the stops of this time table with the given list of new stops.",
					"parameters": [
						{
							"internalName": "gotSet",
							"displayName": "Got Set",
							"description": "True if the stops got successfully set.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "isValidStop",
					"displayName": "Is Valid Stop",
					"description": "Allows to check if the given stop index is valid.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The stop index you want to check its validity.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "valid",
							"displayName": "Valid",
							"description": "True if the stop index is valid.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getStop",
					"displayName": "Get Stop",
					"description": "Returns the stop at the given index.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The index of the stop you want to get.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "stop",
							"displayName": "Stop",
							"description": "The time table stop at the given index.",
							"type":
							{
								"type": "Struct",
								"inner": "TimeTableStop"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setCurrentStop",
					"displayName": "Set Current Stop",
					"description": "Sets the stop, to which the train trys to drive to right now.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The index of the stop the train should drive to right now.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "incrementCurrentStop",
					"displayName": "Increment Current Stop",
					"description": "Sets the current stop to the next stop in the time table.",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getCurrentStop",
					"displayName": "Get Current Stop",
					"description": "Returns the index of the stop the train drives to right now.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The index of the stop the train tries to drive to right now.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Train",
			"displayName": "Train",
			"description": "This class holds information and references about a trains (a collection of multiple railroad vehicles) and its timetable f.e.",
			"parent": "Actor",
			"properties": [
				{
					"internalName": "isPlayerDriven",
					"displayName": "Is Player Driven",
					"description": "True if the train is currently player driven.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isSelfDriving",
					"displayName": "Is Self Driving",
					"description": "True if the train is currently self driving.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "selfDrivingError",
					"displayName": "Self Driving Error",
					"description": "The last self driving error.\n0 = No Error\n1 = No Power\n2 = No Time Table\n3 = Invalid Next Stop\n4 = Invalid Locomotive Placement\n5 = No Path",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "hasTimeTable",
					"displayName": "Has Time Table",
					"description": "True if the train has currently a time table.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "dockState",
					"displayName": "Dock State",
					"description": "The current docking state of the train.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isDocked",
					"displayName": "Is Docked",
					"description": "True if the train is currently docked.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getName",
					"displayName": "Get Name",
					"description": "Returns the name of this train.",
					"parameters": [
						{
							"internalName": "name",
							"displayName": "Name",
							"description": "The name of this train.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setName",
					"displayName": "Set Name",
					"description": "Allows to set the name of this train.",
					"parameters": [
						{
							"internalName": "name",
							"displayName": "Name",
							"description": "The new name of this train.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTrackGraph",
					"displayName": "Get Track Graph",
					"description": "Returns the track graph of which this train is part of.",
					"parameters": [
						{
							"internalName": "track",
							"displayName": "Track",
							"description": "The track graph of which this train is part of.",
							"type":
							{
								"type": "Struct",
								"inner": "TrackGraph"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setSelfDriving",
					"displayName": "Set Self Driving",
					"description": "Allows to set if the train should be self driving or not.",
					"parameters": [
						{
							"internalName": "selfDriving",
							"displayName": "Self Driving",
							"description": "True if the train should be self driving.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getMaster",
					"displayName": "Get Master",
					"description": "Returns the master locomotive that is part of this train.",
					"parameters": [
						{
							"internalName": "master",
							"displayName": "Master",
							"description": "The master locomotive of this train.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadVehicle"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTimeTable",
					"displayName": "Get Time Table",
					"description": "Returns the timetable of this train.",
					"parameters": [
						{
							"internalName": "timeTable",
							"displayName": "Time Table",
							"description": "The timetable of this train.",
							"type":
							{
								"type": "Trace",
								"subclass": "TimeTable"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "newTimeTable",
					"displayName": "New Time Table",
					"description": "Creates and returns a new timetable for this train.",
					"parameters": [
						{
							"internalName": "timeTable",
							"displayName": "Time Table",
							"description": "The new timetable for this train.",
							"type":
							{
								"type": "Trace",
								"subclass": "TimeTable"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getFirst",
					"displayName": "Get First",
					"description": "Returns the first railroad vehicle that is part of this train.",
					"parameters": [
						{
							"internalName": "first",
							"displayName": "First",
							"description": "The first railroad vehicle that is part of this train.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadVehicle"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getLast",
					"displayName": "Get Last",
					"description": "Returns the last railroad vehicle that is part of this train.",
					"parameters": [
						{
							"internalName": "last",
							"displayName": "Last",
							"description": "The last railroad vehicle that is part of this train.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadVehicle"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "dock",
					"displayName": "Dock",
					"description": "Trys to dock the train to the station it is currently at.",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getVehicles",
					"displayName": "Get Vehicles",
					"description": "Returns a list of all the vehicles this train has.",
					"parameters": [
						{
							"internalName": "vehicles",
							"displayName": "Vehicles",
							"description": "A list of all the vehicles this train has.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Trace",
									"subclass": "RailroadVehicle"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "SelfDrivingUpdate",
					"displayName": "Self Driving Update",
					"description": "Triggers when the self driving mode of the train changes",
					"parameters": [
						{
							"internalName": "enabled",
							"displayName": "Enabled",
							"description": "True if the train is now self driving.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "Vehicle",
			"displayName": "Vehicle",
			"description": "A base class for all vehicles.",
			"parent": "Actor",
			"properties": [
				{
					"internalName": "health",
					"displayName": "Health",
					"description": "The health of the vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "maxHealth",
					"displayName": "Max Health",
					"description": "The maximum amount of health this vehicle can have.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isSelfDriving",
					"displayName": "Is Self Driving",
					"description": "True if the vehicle is currently self driving.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "RailroadVehicle",
			"displayName": "Railroad Vehicle",
			"description": "The base class for any vehicle that drives on train tracks.",
			"parent": "Vehicle",
			"properties": [
				{
					"internalName": "length",
					"displayName": "Length",
					"description": "The length of this vehicle on the track.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isDocked",
					"displayName": "Is Docked",
					"description": "True if this vehicle is currently docked to a platform.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isReversed",
					"displayName": "Is Reversed",
					"description": "True if the vehicle is placed reversed on the track.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getTrain",
					"displayName": "Get Train",
					"description": "Returns the train of which this vehicle is part of.",
					"parameters": [
						{
							"internalName": "train",
							"displayName": "Train",
							"description": "The train of which this vehicle is part of",
							"type":
							{
								"type": "Trace",
								"subclass": "Train"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "isCoupled",
					"displayName": "Is Coupled",
					"description": "Allows to check if the given coupler is coupled to another car.",
					"parameters": [
						{
							"internalName": "coupler",
							"displayName": "Coupler",
							"description": "The Coupler you want to check. 0 = Front, 1 = Back",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "coupled",
							"displayName": "Coupled",
							"description": "True of the give coupler is coupled to another car.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getCoupled",
					"displayName": "Get Coupled",
					"description": "Allows to get the coupled vehicle at the given coupler.",
					"parameters": [
						{
							"internalName": "coupler",
							"displayName": "Coupler",
							"description": "The Coupler you want to get the car from. 0 = Front, 1 = Back",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "coupled",
							"displayName": "Coupled",
							"description": "The coupled car of the given coupler is coupled to another car.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadVehicle"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTrackGraph",
					"displayName": "Get Track Graph",
					"description": "Returns the track graph of which this vehicle is part of.",
					"parameters": [
						{
							"internalName": "track",
							"displayName": "Track",
							"description": "The track graph of which this vehicle is part of.",
							"type":
							{
								"type": "Struct",
								"inner": "TrackGraph"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTrackPos",
					"displayName": "Get Track Pos",
					"description": "Returns the track pos at which this vehicle is.",
					"parameters": [
						{
							"internalName": "track",
							"displayName": "Track",
							"description": "The track the track pos points to.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadTrack"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "offset",
							"displayName": "Offset",
							"description": "The offset of the track pos.",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "forward",
							"displayName": "Forward",
							"description": "The forward direction of the track pos. 1 = with the track direction, -1 = against the track direction",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getMovement",
					"displayName": "Get Movement",
					"description": "Returns the vehicle movement of this vehicle.",
					"parameters": [
						{
							"internalName": "movement",
							"displayName": "Movement",
							"description": "The movement of this vehicle.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadVehicleMovement"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "WheeledVehicle",
			"displayName": "Wheeled Vehicle",
			"description": "The base class for all vehicles that used wheels for movement.",
			"parent": "Vehicle",
			"properties": [
				{
					"internalName": "speed",
					"displayName": "Speed",
					"description": "The current forward speed of this vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "burnRatio",
					"displayName": "Burn Ratio",
					"description": "The amount of fuel this vehicle burns.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "wheelsOnGround",
					"displayName": "Wheels On Ground",
					"description": "The number of wheels currently on the ground.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "hasFuel",
					"displayName": "Has Fuel",
					"description": "True if the vehicle has currently fuel to drive.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isInAir",
					"displayName": "Is In Air",
					"description": "True if the vehicle is currently in the air.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isDrifting",
					"displayName": "Is Drifting",
					"description": "True if the vehicle is currently drifting.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getFuelInv",
					"displayName": "Get Fuel Inventory",
					"description": "Returns the inventory that contains the fuel of the vehicle.",
					"parameters": [
						{
							"internalName": "inventory",
							"displayName": "Inventory",
							"description": "The fuel inventory of the vehicle.",
							"type":
							{
								"type": "Trace",
								"subclass": "Inventory"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getStorageInv",
					"displayName": "Get Storage Inventory",
					"description": "Returns the inventory that contains the storage of the vehicle.",
					"parameters": [
						{
							"internalName": "inventory",
							"displayName": "Inventory",
							"description": "The storage inventory of the vehicle.",
							"type":
							{
								"type": "Trace",
								"subclass": "Inventory"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "isValidFuel",
					"displayName": "Is Valid Fuel",
					"description": "Allows to check if the given item type is a valid fuel for this vehicle.",
					"parameters": [
						{
							"internalName": "item",
							"displayName": "Item",
							"description": "The item type you want to check.",
							"type":
							{
								"type": "Class",
								"subclass": "ItemType"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "isValid",
							"displayName": "Is Valid",
							"description": "True if the given item type is a valid fuel for this vehicle.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getCurrentTarget",
					"displayName": "Get Current Target",
					"description": "Returns the index of the target that the vehicle tries to move to right now.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The index of the current target.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "nextTarget",
					"displayName": "Next Target",
					"description": "Sets the current target to the next target in the list.",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setCurrentTarget",
					"displayName": "Set Current Target",
					"description": "Sets the target with the given index as the target this vehicle tries to move to right now.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The index of the target this vehicle should move to now.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTargetList",
					"displayName": "Get Target List",
					"description": "Returns the list of targets/path waypoints.",
					"parameters": [
						{
							"internalName": "targetList",
							"displayName": "Target List",
							"description": "The list of targets/path-waypoints.",
							"type":
							{
								"type": "Trace",
								"subclass": "TargetList"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "ActorComponent",
			"displayName": "Actor Component",
			"description": "A component/part of an actor in the world.",
			"parent": "Object",
			"properties": [
				{
					"internalName": "owner",
					"displayName": "Owner",
					"description": "The parent actor of which this component is part of",
					"type":
					{
						"type": "Trace",
						"subclass": "Actor"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "FactoryConnection",
			"displayName": "Factory Connection",
			"description": "A actor component that is a connection point to which a conveyor or pipe can get attached to.",
			"parent": "ActorComponent",
			"properties": [
				{
					"internalName": "type",
					"displayName": "Type",
					"description": "Returns the type of the connection. 0 = Conveyor, 1 = Pipe",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "direction",
					"displayName": "Direction",
					"description": "The direction in which the items/fluids flow. 0 = Input, 1 = Output, 2 = Any, 3 = Used just as snap point",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isConnected",
					"displayName": "Is Connected",
					"description": "True if something is connected to this connection.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getInventory",
					"displayName": "Get Inventory",
					"description": "Returns the internal inventory of the connection component.",
					"parameters": [
						{
							"internalName": "inventory",
							"displayName": "Inventory",
							"description": "The internal inventory of the connection component.",
							"type":
							{
								"type": "Trace",
								"subclass": "Inventory"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getConnected",
					"displayName": "Get Connected",
					"description": "Returns the connected factory connection component.",
					"parameters": [
						{
							"internalName": "connected",
							"displayName": "Connected",
							"description": "The connected factory connection component.",
							"type":
							{
								"type": "Trace",
								"subclass": "Inventory"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": [
				{
					"internalName": "ItemTransfer",
					"displayName": "Item Transfer",
					"description": "Triggers when the factory connection component transfers an item.",
					"parameters": [
						{
							"internalName": "item",
							"displayName": "Item",
							"description": "The transferred item",
							"type":
							{
								"type": "Struct",
								"inner": "Item"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "FINAdvancedNetworkConnectionComponent",
			"displayName": "FINAdvancedNetworkConnectionComponent",
			"description": "",
			"parent": "ActorComponent",
			"properties": [],
			"functions": [],
			"signals": [
				{
					"internalName": "NetworkUpdate",
					"displayName": "NetworkUpdate",
					"description": "",
					"parameters": [
						{
							"internalName": "changeType",
							"displayName": "changeType",
							"description": "",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "ChangedComponent",
							"displayName": "ChangedComponent",
							"description": "",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "FINMCPAdvConnector",
			"displayName": "FINMCPAdvConnector",
			"description": "",
			"parent": "FINAdvancedNetworkConnectionComponent",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Inventory",
			"displayName": "Inventory",
			"description": "A actor component that can hold multiple item stacks.",
			"parent": "ActorComponent",
			"properties": [
				{
					"internalName": "canRearrange",
					"displayName": "Can Rearrange",
					"description": "Is true if items can be moved between the slots freely.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "itemCount",
					"displayName": "Item Count",
					"description": "The absolute amount of items in the whole inventory.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "size",
					"displayName": "Size",
					"description": "The count of available item stack slots this inventory has.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getStack",
					"displayName": "Get Stack",
					"description": "Returns the item stack at the given index.\nTakes integers as input and returns the corresponding stacks.",
					"parameters": [],
					"Flag_VarArgs": true,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "sort",
					"displayName": "Sort",
					"description": "Sorts the whole inventory. (like the middle mouse click into a inventory)",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "flush",
					"displayName": "Flush",
					"description": "Removes all discardable items from the inventory completely. They will be gone! No way to get them back!",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "canSplitStackAtIndex",
					"displayName": "Can Split Stack at Index",
					"description": "Returns true of the stack at the given index can be split.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The index of the item stack that you want to check if can be split.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "canSplit",
							"displayName": "Can Split",
							"description": "True if the item stack can be split.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "splitStackAtIndex",
					"displayName": "Split Stack at Index",
					"description": "Splits the stack at the given index into two. The passed amount of items gets transferred to the next available slot.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The index of the slot which stack you want to split.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "itemCount",
							"displayName": "Item Count",
							"description": "The count of items that should get transferred to the next available slot.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "moveItemStack",
					"displayName": "Move Stack",
					"description": "Moves the stack of the given slot to another given slot. If partial is allowed, only moves as much items as possible, if not allowed, and the full stack doesnt fit onto the new slot, skips the move.",
					"parameters": [
						{
							"internalName": "fromIndex",
							"displayName": "From Index",
							"description": "Index of the slot from where you want to take the stack.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "toIndex",
							"displayName": "To Index",
							"description": "Index of the slot you want to move the stack to.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "allowPartial",
							"displayName": "Allow Partial",
							"description": "Pass true if only partial item stack moving is allowed.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "count",
							"displayName": "Count",
							"description": "The count of items that have been moved.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "PipeConnection",
			"displayName": "Pipe Connection",
			"description": "A actor component that is a connection point to which a conveyor or pipe can get attached to.",
			"parent": "ActorComponent",
			"properties": [
				{
					"internalName": "isConnected",
					"displayName": "Is Connected",
					"description": "True if something is connected to this connection.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "fluidBoxContent",
					"displayName": "Fluid Box Content",
					"description": "Returns the amount of fluid this fluid container contains",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "fluidBoxHeight",
					"displayName": "Fluid Box Height",
					"description": "Returns the height of this fluid container",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "fluidBoxLaminarHeight",
					"displayName": "Fluid Box Laminar Height",
					"description": "Returns the laminar height of this fluid container",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "fluidBoxFlowThrough",
					"displayName": "Fluid Box Flow Through",
					"description": "Returns the amount of fluid flowing through this fluid container",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "fluidBoxFlowFill",
					"displayName": "Fluid Box Flow Fill",
					"description": "Returns the fill rate of this fluid container",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "fluidBoxFlowDrain",
					"displayName": "Fluid Box Flow Drain",
					"description": "Returns the drain rate of this fluid container",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "fluidBoxFlowLimit",
					"displayName": "Fluid Box Flow Limit",
					"description": "Returns the the maximum flow limit of this fluid container",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "networkID",
					"displayName": "Get Network ID",
					"description": "Returns the network ID of the pipe network this connection is associated with",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getFluidDescriptor",
					"displayName": "Get Fluid Descriptor",
					"description": "?",
					"parameters": [
						{
							"internalName": "fluidDescriptor",
							"displayName": "Fluid Descriptor",
							"description": "?",
							"type":
							{
								"type": "Trace",
								"subclass": "ItemType"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "flushPipeNetwork",
					"displayName": "Flush Pipe Network",
					"description": "Flush the associated pipe network",
					"parameters": [],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "PowerConnection",
			"displayName": "Power Connection",
			"description": "A actor component that allows for a connection point to the power network. Basically a point were a power cable can get attached to.",
			"parent": "ActorComponent",
			"properties": [
				{
					"internalName": "connections",
					"displayName": "Connections",
					"description": "The amount of connections this power connection has.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "maxConnections",
					"displayName": "Max Connections",
					"description": "The maximum amount of connections this power connection can handle.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getPower",
					"displayName": "Get Power",
					"description": "Returns the power info component of this power connection.",
					"parameters": [
						{
							"internalName": "power",
							"displayName": "Power",
							"description": "The power info component this power connection uses.",
							"type":
							{
								"type": "Trace",
								"subclass": "PowerInfo"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getCircuit",
					"displayName": "Get Circuit",
					"description": "Returns the power circuit to which this connection component is attached to.",
					"parameters": [
						{
							"internalName": "circuit",
							"displayName": "Circuit",
							"description": "The Power Circuit this connection component is attached to.",
							"type":
							{
								"type": "Trace",
								"subclass": "PowerCircuit"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "PowerInfo",
			"displayName": "Power Info",
			"description": "A actor component that provides information and mainly statistics about the power connection it is attached to.",
			"parent": "ActorComponent",
			"properties": [
				{
					"internalName": "dynProduction",
					"displayName": "Dynamic Production",
					"description": "The production capacity this connection provided last tick.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "baseProduction",
					"displayName": "Base Production",
					"description": "The base production capacity this connection always provides.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "maxDynProduction",
					"displayName": "Max Dynamic Production",
					"description": "The maximum production capacity this connection could have provided to the circuit in the last tick.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "targetConsumption",
					"displayName": "Target Consumption",
					"description": "The amount of energy the connection wanted to consume from the circuit in the last tick.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "consumption",
					"displayName": "Consumption",
					"description": "The amount of energy the connection actually consumed in the last tick.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "hasPower",
					"displayName": "Has Power",
					"description": "True if the connection has satisfied power values and counts as being powered. (True if it has power)",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getCircuit",
					"displayName": "Get Circuit",
					"description": "Returns the power circuit this info component is part of.",
					"parameters": [
						{
							"internalName": "circuit",
							"displayName": "Circuit",
							"description": "The Power Circuit this info component is attached to.",
							"type":
							{
								"type": "Trace",
								"subclass": "PowerCircuit"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "RailroadTrackConnection",
			"displayName": "Railroad Track Connection",
			"description": "This is a actor component for railroad tracks that allows to connect to other track connections and so to connection multiple tracks with each other so you can build a train network.",
			"parent": "ActorComponent",
			"properties": [
				{
					"internalName": "connectorLocation",
					"displayName": "Connector Location",
					"description": "The world location of the the connection.",
					"type":
					{
						"type": "Struct",
						"inner": "Vector"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "connectorNormal",
					"displayName": "Connector Normal",
					"description": "The normal vector of the connector.",
					"type":
					{
						"type": "Struct",
						"inner": "Vector"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isConnected",
					"displayName": "Is Connected",
					"description": "True if the connection has any connection to other connections.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isFacingSwitch",
					"displayName": "Is Facing Switch",
					"description": "True if this connection is pointing to the merge/spread point of the switch.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isTrailingSwitch",
					"displayName": "Is Trailing Switch",
					"description": "True if this connection is pointing away from the merge/spread point of a switch.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "numSwitchPositions",
					"displayName": "Num Switch Positions",
					"description": "Returns the number of different switch positions this switch can have.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getConnection",
					"displayName": "Get Connection",
					"description": "Returns the connected connection with the given index.",
					"parameters": [
						{
							"internalName": "connection",
							"displayName": "Connection",
							"description": "The connected connection at the given index.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadTrackConnection"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The index of the connected connection you want to get.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getConnections",
					"displayName": "Get Connections",
					"description": "Returns a list of all connected connections.",
					"parameters": [
						{
							"internalName": "connections",
							"displayName": "Connections",
							"description": "A list of all connected connections.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Trace",
									"subclass": "RailroadTrackConnection"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTrackPos",
					"displayName": "Get Track Pos",
					"description": "Returns the track pos at which this connection is.",
					"parameters": [
						{
							"internalName": "track",
							"displayName": "Track",
							"description": "The track the track pos points to.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadTrack"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "offset",
							"displayName": "Offset",
							"description": "The offset of the track pos.",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "forward",
							"displayName": "Forward",
							"description": "The forward direction of the track pos. 1 = with the track direction, -1 = against the track direction",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTrack",
					"displayName": "Get Track",
					"description": "Returns the track of which this connection is part of.",
					"parameters": [
						{
							"internalName": "track",
							"displayName": "Track",
							"description": "The track of which this connection is part of.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadTrack"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getSwitchControl",
					"displayName": "Get Switch Control",
					"description": "Returns the switch control of this connection.",
					"parameters": [
						{
							"internalName": "switchControl",
							"displayName": "Switch",
							"description": "The switch control of this connection.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadSwitchControl"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getStation",
					"displayName": "Get Station",
					"description": "Returns the station of which this connection is part of.",
					"parameters": [
						{
							"internalName": "station",
							"displayName": "Station",
							"description": "The station of which this connection is part of.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadStation"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getFacingSignal",
					"displayName": "Get Facing Signal",
					"description": "Returns the signal this connection is facing to.",
					"parameters": [
						{
							"internalName": "signal",
							"displayName": "Signal",
							"description": "The signal this connection is facing.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadSignal"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTrailingSignal",
					"displayName": "Get Trailing Signal",
					"description": "Returns the signal this connection is trailing from.",
					"parameters": [
						{
							"internalName": "signal",
							"displayName": "Signal",
							"description": "The signal this connection is trailing.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadSignal"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getOpposite",
					"displayName": "Get Opposite",
					"description": "Returns the opposite connection of the track this connection is part of.",
					"parameters": [
						{
							"internalName": "opposite",
							"displayName": "Opposite",
							"description": "The opposite connection of the track this connection is part of.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadTrackConnection"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getNext",
					"displayName": "Get Next",
					"description": "Returns the next connection in the direction of the track. (used the correct path switched point to)",
					"parameters": [
						{
							"internalName": "next",
							"displayName": "Next",
							"description": "The next connection in the direction of the track.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadTrackConnection"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setSwitchPosition",
					"displayName": "Set Switch Position",
					"description": "Sets the position (connection index) to which the track switch points to.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The connection index to which the switch should point to.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getSwitchPosition",
					"displayName": "Get Switch Position",
					"description": "Returns the current switch position.",
					"parameters": [
						{
							"internalName": "index",
							"displayName": "Index",
							"description": "The index of the connection connection the switch currently points to.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "RailroadVehicleMovement",
			"displayName": "Railroad Vehicle Movement",
			"description": "This actor component contains all the information about the movement of a railroad vehicle.",
			"parent": "ActorComponent",
			"properties": [
				{
					"internalName": "orientation",
					"displayName": "Orientation",
					"description": "The orientation of the vehicle",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "mass",
					"displayName": "Mass",
					"description": "The current mass of the vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "tareMass",
					"displayName": "Tare Mass",
					"description": "The tare mass of the vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "payloadMass",
					"displayName": "Payload Mass",
					"description": "The mass of the payload of the vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "speed",
					"displayName": "Speed",
					"description": "The current forward speed of the vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "relativeSpeed",
					"displayName": "Relative Speed",
					"description": "The current relative forward speed to the ground.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "maxSpeed",
					"displayName": "Max Speed",
					"description": "The maximum forward speed the vehicle can reach.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "gravitationalForce",
					"displayName": "Gravitational Force",
					"description": "The current gravitational force acting on the vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "tractiveForce",
					"displayName": "Tractive Force",
					"description": "The current tractive force acting on the vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "resistiveForce",
					"displayName": "Resistive Force",
					"description": "The resistive force currently acting on the vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "gradientForce",
					"displayName": "Gradient Force",
					"description": "The gradient force currently acting on the vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "brakingForce",
					"displayName": "Braking Force",
					"description": "The braking force currently acting on the vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "airBrakingForce",
					"displayName": "Air Braking Force",
					"description": "The air braking force currently acting on the vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "dynamicBrakingForce",
					"displayName": "Dynamic Braking Force",
					"description": "The dynamic braking force currently acting on the vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "maxTractiveEffort",
					"displayName": "Max Tractive Effort",
					"description": "The maximum tractive effort of this vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "maxDynamicBrakingEffort",
					"displayName": "Max Dynamic Braking Effort",
					"description": "The maximum dynamic braking effort of this vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "maxAirBrakingEffort",
					"displayName": "Max Air Braking Effort",
					"description": "The maximum air braking effort of this vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "trackGrade",
					"displayName": "Track Grade",
					"description": "The current track grade of this vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "trackCurvature",
					"displayName": "Track Curvature",
					"description": "The current track curvature of this vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "wheelsetAngle",
					"displayName": "Wheelset Angle",
					"description": "The wheelset angle of this vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "rollingResistance",
					"displayName": "Rolling Resistance",
					"description": "The current rolling resistance of this vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "curvatureResistance",
					"displayName": "Curvature Resistance",
					"description": "The current curvature resistance of this vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "airResistance",
					"displayName": "Air Resistance",
					"description": "The current air resistance of this vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "gradientResistance",
					"displayName": "Gradient Resistance",
					"description": "The current gradient resistance of this vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "wheelRotation",
					"displayName": "Wheel Rotation",
					"description": "The current wheel rotation of this vehicle.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "numWheelsets",
					"displayName": "Num Wheelsets",
					"description": "The number of wheelsets this vehicle has.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isMoving",
					"displayName": "Is Moving",
					"description": "True if this vehicle is currently moving.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getVehicle",
					"displayName": "Get Vehicle",
					"description": "Returns the vehicle this movement component holds the movement information of.",
					"parameters": [
						{
							"internalName": "vehicle",
							"displayName": "Vehicle",
							"description": "The vehicle this movement component holds the movement information of.",
							"type":
							{
								"type": "Trace",
								"subclass": "RailroadVehicle"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getWheelsetRotation",
					"displayName": "Get Wheelset Rotation",
					"description": "Returns the current rotation of the given wheelset.",
					"parameters": [
						{
							"internalName": "wheelset",
							"displayName": "Wheelset",
							"description": "The index of the wheelset you want to get the rotation of.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "x",
							"displayName": "X",
							"description": "The wheelset's rotation X component.",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "y",
							"displayName": "Y",
							"description": "The wheelset's rotation Y component.",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "z",
							"displayName": "Z",
							"description": "The wheelset's rotation Z component.",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getWheelsetOffset",
					"displayName": "Get Wheelset Offset",
					"description": "Returns the offset of the wheelset with the given index from the start of the vehicle.",
					"parameters": [
						{
							"internalName": "wheelset",
							"displayName": "Wheelset",
							"description": "The index of the wheelset you want to get the offset of.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "offset",
							"displayName": "Offset",
							"description": "The offset of the wheelset.",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getCouplerRotationAndExtension",
					"displayName": "Get Coupler Rotation And Extension",
					"description": "Returns the normal vector and the extension of the coupler with the given index.",
					"parameters": [
						{
							"internalName": "coupler",
							"displayName": "Coupler",
							"description": "The index of which you want to get the normal and extension of.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "x",
							"displayName": "X",
							"description": "The X component of the coupler normal.",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "y",
							"displayName": "Y",
							"description": "The Y component of the coupler normal.",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "z",
							"displayName": "Z",
							"description": "The Z component of the coupler normal.",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "extension",
							"displayName": "Extension",
							"description": "The extension of the coupler.",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "ItemCategory",
			"displayName": "Item Category",
			"description": "The category of some items.",
			"parent": "Object",
			"properties": [
				{
					"internalName": "name",
					"displayName": "Name",
					"description": "The name of the category.",
					"type":
					{
						"type": "String"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "ItemType",
			"displayName": "Item Type",
			"description": "The type of an item (iron plate, iron rod, leaves)",
			"parent": "Object",
			"properties": [
				{
					"internalName": "form",
					"displayName": "Form",
					"description": "The matter state of this resource.\n1: Solid\n2: Liquid\n3: Gas\n4: Heat",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				},
				{
					"internalName": "energy",
					"displayName": "Energy",
					"description": "How much energy this resource provides if used as fuel.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				},
				{
					"internalName": "radioactiveDecay",
					"displayName": "Radioactive Decay",
					"description": "The amount of radiation this item radiates.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				},
				{
					"internalName": "name",
					"displayName": "Name",
					"description": "The name of the item.",
					"type":
					{
						"type": "String"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				},
				{
					"internalName": "description",
					"displayName": "Description",
					"description": "The description of this item.",
					"type":
					{
						"type": "String"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				},
				{
					"internalName": "max",
					"displayName": "Max",
					"description": "The maximum stack size of this item.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				},
				{
					"internalName": "canBeDiscarded",
					"displayName": "Can be Discarded",
					"description": "True if this item can be discarded.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				},
				{
					"internalName": "category",
					"displayName": "Category",
					"description": "The category in which this item is in.",
					"type":
					{
						"type": "Class",
						"subclass": "ItemCategory"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				},
				{
					"internalName": "fluidColor",
					"displayName": "Fluid Color",
					"description": "The color of this fluid.",
					"type":
					{
						"type": "Struct",
						"inner": "Color"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "PowerCircuit",
			"displayName": "Power Circuit",
			"description": "A Object that represents a whole power circuit.",
			"parent": "Object",
			"properties": [
				{
					"internalName": "production",
					"displayName": "Production",
					"description": "The amount of power produced by the whole circuit in the last tick.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "consumption",
					"displayName": "Consumption",
					"description": "The power consumption of the whole circuit in thg last tick.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "capacity",
					"displayName": "Capacity",
					"description": "The power capacity of the whole network in the last tick. (The max amount of power available in the last tick)",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "batteryInput",
					"displayName": "Battery Input",
					"description": "The power that gone into batteries in the last tick.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "maxPowerConsumption",
					"displayName": "Max Power Consumption",
					"description": "The maximum consumption of power in the last tick.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isFuseTriggered",
					"displayName": "Is Fuse Triggered",
					"description": "True if the fuse in the network triggered.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "hasBatteries",
					"displayName": "Has Batteries",
					"description": "True if the power circuit has batteries connected to it.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "batteryCapacity",
					"displayName": "Battery Capacity",
					"description": "The energy capacity all batteries of the network combined provide.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "batteryStore",
					"displayName": "Battery Store",
					"description": "The amount of energy currently stored in all batteries of the network combined.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "batteryStorePercent",
					"displayName": "Battery Store Percentage",
					"description": "The fill status in percent of all batteries of the network combined.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "batteryTimeUntilFull",
					"displayName": "Battery Time until Full",
					"description": "The time in seconds until every battery in the network is filled.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "batteryTimeUntilEmpty",
					"displayName": "Battery Time until Empty",
					"description": "The time in seconds until every battery in the network is empty.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "batteryIn",
					"displayName": "Battery Input",
					"description": "The amount of energy that currently gets stored in every battery of the whole network.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "batteryOut",
					"displayName": "Battery Output",
					"description": "The amount of energy that currently discharges from every battery in the whole network.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": [
				{
					"internalName": "PowerFuseChanged",
					"displayName": "Power Fuse Changed",
					"description": "Get Triggered when the fuse state of the power circuit changes.",
					"parameters": [],
					"isVarArgs": false
				}
			]
		},
		{
			"internalName": "Recipe",
			"displayName": "Recipe",
			"description": "A struct that holds information about a recipe in its class. Means don't use it as object, use it as class type!",
			"parent": "Object",
			"properties": [
				{
					"internalName": "name",
					"displayName": "Name",
					"description": "The name of this recipe.",
					"type":
					{
						"type": "String"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				},
				{
					"internalName": "duration",
					"displayName": "Duration",
					"description": "The duration how much time it takes to cycle the recipe once.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				}
			],
			"functions": [
				{
					"internalName": "getProducts",
					"displayName": "Get Products",
					"description": "Returns a array of item amounts, this recipe returns (outputs) when the recipe is processed once.",
					"parameters": [
						{
							"internalName": "products",
							"displayName": "Products",
							"description": "The products of this recipe.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Struct",
									"inner": "ItemAmount"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": false,
					"Flag_ClassFunc": true,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getIngredients",
					"displayName": "Get Ingredients",
					"description": "Returns a array of item amounts, this recipe needs (input) so the recipe can be processed.",
					"parameters": [
						{
							"internalName": "ingredients",
							"displayName": "Ingredients",
							"description": "The ingredients of this recipe.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Struct",
									"inner": "ItemAmount"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": false,
					"Flag_ClassFunc": true,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "ReflectionBase",
			"displayName": "Reflection Base",
			"description": "The base class for all things of the reflection system.",
			"parent": "Object",
			"properties": [
				{
					"internalName": "name",
					"displayName": "Name",
					"description": "The internal name.",
					"type":
					{
						"type": "String"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "displayName",
					"displayName": "Display Name",
					"description": "The display name used in UI which might be localized.",
					"type":
					{
						"type": "String"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "description",
					"displayName": "Description",
					"description": "The description of this base.",
					"type":
					{
						"type": "String"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "Function",
			"displayName": "Function",
			"description": "A reflection object representing a function.",
			"parent": "ReflectionBase",
			"properties": [
				{
					"internalName": "flags",
					"displayName": "Flags",
					"description": "The function bit flag register defining some behaviour of it.\n\nBits and their meaning (least significant bit first):\nIs this function has a variable amount of input parameters.\nCan this function get called in synchronous runtime.\nCan this function can get called in parallel runtime.\nCan this function get called in asynchronous runtime.\nIs this function a member function.\nThe function is a class function.\nThe function is a static function.\nThe function has a variable amount of return values.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getParameters",
					"displayName": "Get Parameters",
					"description": "Returns all the parameters of this function.",
					"parameters": [
						{
							"internalName": "parameters",
							"displayName": "Parameters",
							"description": "The parameters this function.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Object",
									"subclass": "Property"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Property",
			"displayName": "Property",
			"description": "A Reflection object that holds information about properties and parameters.",
			"parent": "ReflectionBase",
			"properties": [
				{
					"internalName": "dataType",
					"displayName": "Data Type",
					"description": "The data type of this property.\n0: nil, 1: bool, 2: int, 3: float, 4: str, 5: object, 6: class, 7: trace, 8: struct, 9: array, 10: anything",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "flags",
					"displayName": "Flags",
					"description": "The property bit flag register defining some behaviour of it.\n\nBits and their meaning (least significant bit first):\nIs this property a member attribute.\nIs this property read only.\nIs this property a parameter.\nIs this property a output parameter.\nIs this property a return value.\nCan this property get accessed in synchronous runtime.\nCan this property can get accessed in parallel runtime.\nCan this property get accessed in asynchronous runtime.\nThis property is a class attribute.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "ArrayProperty",
			"displayName": "Array Property",
			"description": "A reflection object representing a array property.",
			"parent": "Property",
			"properties": [],
			"functions": [
				{
					"internalName": "getInner",
					"displayName": "Get Inner",
					"description": "Returns the inner type of this array.",
					"parameters": [
						{
							"internalName": "inner",
							"displayName": "Inner",
							"description": "The inner type of this array.",
							"type":
							{
								"type": "Object",
								"subclass": "Property"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "ClassProperty",
			"displayName": "Class Property",
			"description": "A reflection object representing a class property.",
			"parent": "Property",
			"properties": [],
			"functions": [
				{
					"internalName": "getSubclass",
					"displayName": "Get Subclass",
					"description": "Returns the subclass type of this class. Meaning, the stored classes need to be of this type.",
					"parameters": [
						{
							"internalName": "subclass",
							"displayName": "Subclass",
							"description": "The subclass of this class property.",
							"type":
							{
								"type": "Object",
								"subclass": "Class"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "ObjectProperty",
			"displayName": "Object Property",
			"description": "A reflection object representing a object property.",
			"parent": "Property",
			"properties": [],
			"functions": [
				{
					"internalName": "getSubclass",
					"displayName": "Get Subclass",
					"description": "Returns the subclass type of this object. Meaning, the stored objects need to be of this type.",
					"parameters": [
						{
							"internalName": "subclass",
							"displayName": "Subclass",
							"description": "The subclass of this object.",
							"type":
							{
								"type": "Object",
								"subclass": "Class"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "StructProperty",
			"displayName": "Struct Property",
			"description": "A reflection object representing a struct property.",
			"parent": "Property",
			"properties": [],
			"functions": [
				{
					"internalName": "getSubclass",
					"displayName": "Get Subclass",
					"description": "Returns the subclass type of this struct. Meaning, the stored structs need to be of this type.",
					"parameters": [
						{
							"internalName": "subclass",
							"displayName": "Subclass",
							"description": "The subclass of this struct.",
							"type":
							{
								"type": "Object",
								"subclass": "Struct"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "TraceProperty",
			"displayName": "Trace Property",
			"description": "A reflection object representing a trace property.",
			"parent": "Property",
			"properties": [],
			"functions": [
				{
					"internalName": "getSubclass",
					"displayName": "Get Subclass",
					"description": "Returns the subclass type of this trace. Meaning, the stored traces need to be of this type.",
					"parameters": [
						{
							"internalName": "subclass",
							"displayName": "Subclass",
							"description": "The subclass of this trace.",
							"type":
							{
								"type": "Object",
								"subclass": "Class"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Signal",
			"displayName": "Signal",
			"description": "A reflection object representing a signal.",
			"parent": "ReflectionBase",
			"properties": [
				{
					"internalName": "isVarArgs",
					"displayName": "Is VarArgs",
					"description": "True if this signal has a variable amount of arguments.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getParameters",
					"displayName": "Get Parameters",
					"description": "Returns all the parameters of this signal.",
					"parameters": [
						{
							"internalName": "parameters",
							"displayName": "Parameters",
							"description": "The parameters this signal.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Object",
									"subclass": "Property"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Struct",
			"displayName": "Struct",
			"description": "Reflection Object that holds information about structures.",
			"parent": "ReflectionBase",
			"properties": [],
			"functions": [
				{
					"internalName": "getParent",
					"displayName": "Get Parent",
					"description": "Returns the parent type of this type.",
					"parameters": [
						{
							"internalName": "parent",
							"displayName": "Parent",
							"description": "The parent type of this type.",
							"type":
							{
								"type": "Object",
								"subclass": "Class"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": false,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getProperties",
					"displayName": "Get Properties",
					"description": "Returns all the properties of this type.",
					"parameters": [
						{
							"internalName": "properties",
							"displayName": "Properties",
							"description": "The properties this specific type implements (excluding properties from parent types).",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Object",
									"subclass": "Property"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getAllProperties",
					"displayName": "Get All Properties",
					"description": "Returns all the properties of this and parent types.",
					"parameters": [
						{
							"internalName": "properties",
							"displayName": "Properties",
							"description": "The properties this type implements including properties from parent types.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Object",
									"subclass": "Property"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getFunctions",
					"displayName": "Get Functions",
					"description": "Returns all the functions of this type.",
					"parameters": [
						{
							"internalName": "functions",
							"displayName": "Functions",
							"description": "The functions this specific type implements (excluding properties from parent types).",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Object",
									"subclass": "Function"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getAllFunctions",
					"displayName": "Get All Functions",
					"description": "Returns all the functions of this and parent types.",
					"parameters": [
						{
							"internalName": "functions",
							"displayName": "Functions",
							"description": "The functions this type implements including functions from parent types.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Object",
									"subclass": "Property"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "isChildOf",
					"displayName": "Is Child Of",
					"description": "Allows to check if this struct is a child struct of the given struct or the given struct it self.",
					"parameters": [
						{
							"internalName": "parent",
							"displayName": "Parent",
							"description": "The parent struct you want to check if this struct is a child of.",
							"type":
							{
								"type": "Object",
								"subclass": "Struct"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "isChild",
							"displayName": "Is Child",
							"description": "True if this struct is a child of parent.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "Class",
			"displayName": "Class",
			"description": "Object that contains all information about a type.",
			"parent": "Struct",
			"properties": [],
			"functions": [
				{
					"internalName": "getSignals",
					"displayName": "Get Signals",
					"description": "Returns all the signals of this type.",
					"parameters": [
						{
							"internalName": "signals",
							"displayName": "Signals",
							"description": "The signals this specific type implements (excluding properties from parent types).",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Object",
									"subclass": "Signal"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getAllSignals",
					"displayName": "Get All Signals",
					"description": "Returns all the signals of this and its parent types.",
					"parameters": [
						{
							"internalName": "signals",
							"displayName": "Signals",
							"description": "The signals this type and all it parents implement.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Object",
									"subclass": "Signal"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		},
		{
			"internalName": "SignPrefab",
			"displayName": "Sign Prefab",
			"description": "Describes a layout of a sign.",
			"parent": "Object",
			"properties": [],
			"functions": [],
			"signals": []
		},
		{
			"internalName": "SignType",
			"displayName": "Sign Type",
			"description": "Describes the type of a sign.",
			"parent": "Object",
			"properties": [
				{
					"internalName": "dimensions",
					"displayName": "Dimensions",
					"description": "The canvas dimensions of this sign.",
					"type":
					{
						"type": "Struct",
						"inner": "Vector2D"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": true
				}
			],
			"functions": [
				{
					"internalName": "getColors",
					"displayName": "Get Colors",
					"description": "Returns the default foreground/background/auxiliary colors of this sign type.",
					"parameters": [
						{
							"internalName": "foreground",
							"displayName": "Foreground",
							"description": "The foreground color",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "background",
							"displayName": "Background",
							"description": "The background color",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "auxiliary",
							"displayName": "Auxiliary",
							"description": "The auxiliary color",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": false,
					"Flag_ClassFunc": true,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getPrefabs",
					"displayName": "Get Prefabs",
					"description": "Returns a list of all sign prefabs this sign can use.",
					"parameters": [
						{
							"internalName": "prefabs",
							"displayName": "Prefabs",
							"description": "The sign prefabs this sign can use",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Class",
									"subclass": "SignPrefab"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": false,
					"Flag_ClassFunc": true,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTextElements",
					"displayName": "Get Text Elements",
					"description": "Returns a list of element names and their default text values.",
					"parameters": [
						{
							"internalName": "textElementsDefaultValues",
							"displayName": "Text Elements Default Values",
							"description": "A list of default values for the text elements of this type.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "String"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": false,
					"Flag_ClassFunc": true,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getIconElements",
					"displayName": "Get Icon Elements",
					"description": "Returns a list of element names and their default icon values.",
					"parameters": [
						{
							"internalName": "iconElementsDefaultValues",
							"displayName": "Icon Elements Default Values",
							"description": "A list of default values for the icon elements of this type.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Object",
									"subclass": "Object"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": false,
					"Flag_ClassFunc": true,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			],
			"signals": []
		}
	],
	"structs": [
		{
			"internalName": "Color",
			"displayName": "Color",
			"description": "A structure that holds a rgba color value",
			"properties": [
				{
					"internalName": "r",
					"displayName": "Red",
					"description": "The red portion of the color.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "g",
					"displayName": "Green",
					"description": "The green portion of the color.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "b",
					"displayName": "Blue",
					"description": "The blue portion of the color.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "a",
					"displayName": "Alpha",
					"description": "The alpha (opacity) portion of the color.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": []
		},
		{
			"internalName": "Future",
			"displayName": "Future",
			"description": "A Future struct MAY BE HANDLED BY CPU IMPLEMENTATION differently, generally, this is used to make resources available on a later point in time. Like if data won't be available right away and you have to wait for it to process first. Like when you do a HTTP Request, then it takes some time to get the data from the web server. And since we don't want to halt the game and wait for the data, you can use a future to check if the data is available, or let just the Lua Code wait, till the data becomes available.",
			"properties": [],
			"functions": []
		},
		{
			"internalName": "GPUT1Buffer",
			"displayName": "GPU T1 Buffer",
			"description": "A structure that can hold a buffer of characters and colors that can be displayed with a gpu",
			"properties": [],
			"functions": [
				{
					"internalName": "getSize",
					"displayName": "Get Size",
					"description": "Allows to get the dimensions of the buffer.",
					"parameters": [
						{
							"internalName": "width",
							"displayName": "Width",
							"description": "The width of this buffer",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "height",
							"displayName": "Height",
							"description": "The height of this buffer",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setSize",
					"displayName": "Set Size",
					"description": "Allows to set the dimensions of the buffer.",
					"parameters": [
						{
							"internalName": "width",
							"displayName": "Width",
							"description": "The width this buffer should now have",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "height",
							"displayName": "Height",
							"description": "The height this buffer now have",
							"type":
							{
								"type": "Float"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "get",
					"displayName": "Get",
					"description": "Allows to get a single pixel from the buffer at the given position",
					"parameters": [
						{
							"internalName": "x",
							"displayName": "X",
							"description": "The x position of the character you want to get",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "y",
							"displayName": "Y",
							"description": "The y position of the character you want to get",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "c",
							"displayName": "Char",
							"description": "The character at the given position",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "foreground",
							"displayName": "Foreground Color",
							"description": "The foreground color of the pixel at the given position",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "background",
							"displayName": "Background Color",
							"description": "The background color of the pixel at the given position",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "set",
					"displayName": "Set",
					"description": "Allows to set a single pixel of the buffer at the given position",
					"parameters": [
						{
							"internalName": "x",
							"displayName": "X",
							"description": "The x position of the character you want to set",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "y",
							"displayName": "Y",
							"description": "The y position of the character you want to set",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "c",
							"displayName": "Char",
							"description": "The character the pixel should have",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "foreground",
							"displayName": "Foreground Color",
							"description": "The foreground color the pixel at the given position should have",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "background",
							"displayName": "Background Color",
							"description": "The background color the pixel at the given position should have",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "done",
							"displayName": "Done",
							"description": "True if the pixel got set successfully",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "copy",
					"displayName": "Copy",
					"description": "Copies the given buffer at the given offset of the upper left corner into this buffer.",
					"parameters": [
						{
							"internalName": "x",
							"displayName": "X",
							"description": "The x offset of the upper left corner of the buffer relative to this buffer",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "y",
							"displayName": "Y",
							"description": "The y offset of the upper left corner of the buffer relative to this buffer",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "buffer",
							"displayName": "Buffer",
							"description": "The buffer from wich you want to copy from",
							"type":
							{
								"type": "Struct",
								"inner": "GPUT1Buffer"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "textBlendMode",
							"displayName": "Text Blend Mode",
							"description": "The blend mode that is used for the text.\n0 = Overwrite this with the content of the given buffer\n1 = Overwrite with only characters that are not ' '\n2 = Overwrite only were this characters are ' '\n3 = Keep this buffer",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "foregroundBlendMode",
							"displayName": "Foreground Color Blend Mode",
							"description": "The blend mode that is used for the foreground color.\n0 = Overwrite with the given color\n1 = Normal alpha composition\n2 = Multiply\n3 = Divide\n4 = Addition\n5 = Subtraction\n6 = Difference\n7 = Darken Only\n8 = Lighten Only\n9 = None",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "backgroundBlendMode",
							"displayName": "Background Color Blend Mode",
							"description": "The blend mode that is used for the background color.\n0 = Overwrite with the given color\n1 = Normal alpha composition\n2 = Multiply\n3 = Divide\n4 = Addition\n5 = Subtraction\n6 = Difference\n7 = Darken Only\n8 = Lighten Only\n9 = None",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setText",
					"displayName": "Set Text",
					"description": "Allows to write the given text onto the buffer and with the given offset.",
					"parameters": [
						{
							"internalName": "x",
							"displayName": "X",
							"description": "The X Position at which the text should begin to get written.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "y",
							"displayName": "Y",
							"description": "The Y Position at which the text should begin to get written.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "text",
							"displayName": "Text",
							"description": "The text that should get written.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "foreground",
							"displayName": "Foreground",
							"description": "The foreground color which will be used to write the text.",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "background",
							"displayName": "Background",
							"description": "The background color which will be used to write the text.",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "fill",
					"displayName": "Fill",
					"description": "Draws the given character at all given positions in the given rectangle on-to the hidden screen buffer.",
					"parameters": [
						{
							"internalName": "x",
							"displayName": "X",
							"description": "The x coordinate at which the rectangle should get drawn. (upper-left corner)",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "y",
							"displayName": "Y",
							"description": "The y coordinate at which the rectangle should get drawn. (upper-left corner)",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "width",
							"displayName": "Width",
							"description": "The width of the rectangle.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "height",
							"displayName": "Height",
							"description": "The height of the rectangle.",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "character",
							"displayName": "Character",
							"description": "A string with a single character that will be used for each pixel in the range you want to fill.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "foreground",
							"displayName": "Foreground",
							"description": "The foreground color which will be used to fill the rectangle.",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "background",
							"displayName": "Background",
							"description": "The background color which will be used to fill the rectangle.",
							"type":
							{
								"type": "Struct",
								"inner": "Color"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setRaw",
					"displayName": "Set Raw",
					"description": "Allows to set the internal data of the buffer more directly.",
					"parameters": [
						{
							"internalName": "characters",
							"displayName": "Characters",
							"description": "The characters you want to draw with a length of exactly width*height.",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "foreground",
							"displayName": "Foreground Color",
							"description": "The values of the foreground color slots for each character were a group of four values give one color. so the length has to be exactly width*height*4.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Float"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "background",
							"displayName": "Background Color",
							"description": "The values of the background color slots for each character were a group of four values give one color. so the length has to be exactly width*height*4.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Float"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "success",
							"displayName": "Success",
							"description": "True if the raw data was successfully written",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": true,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "clone",
					"displayName": "Clone",
					"description": "Clones this buffer into a new struct",
					"parameters": [
						{
							"internalName": "buffer",
							"displayName": "Buffer",
							"description": "The clone of this buffer",
							"type":
							{
								"type": "Struct",
								"inner": "GPUT1Buffer"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			]
		},
		{
			"internalName": "Item",
			"displayName": "Item",
			"description": "A structure that holds item information.",
			"properties": [
				{
					"internalName": "type",
					"displayName": "Type",
					"description": "The type of the item.",
					"type":
					{
						"type": "Class",
						"subclass": "ItemType"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": []
		},
		{
			"internalName": "ItemAmount",
			"displayName": "Item Amount",
			"description": "A struct that holds a pair of amount and item type.",
			"properties": [
				{
					"internalName": "amount",
					"displayName": "Amount",
					"description": "The amount of items.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "type",
					"displayName": "Type",
					"description": "The type of the items.",
					"type":
					{
						"type": "Class",
						"subclass": "ItemType"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": []
		},
		{
			"internalName": "ItemStack",
			"displayName": "Item Stack",
			"description": "A structure that holds item information and item amount to represent an item stack.",
			"properties": [
				{
					"internalName": "count",
					"displayName": "Count",
					"description": "The count of items.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "item",
					"displayName": "Item",
					"description": "The item information of this stack.",
					"type":
					{
						"type": "Struct",
						"inner": "Item"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": []
		},
		{
			"internalName": "PrefabSignData",
			"displayName": "Prefab Sign Data",
			"description": "This structure stores all data that defines what a sign displays.",
			"properties": [
				{
					"internalName": "layout",
					"displayName": "Layout",
					"description": "The object that actually displays the layout",
					"type":
					{
						"type": "Class",
						"subclass": "Object"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "foreground",
					"displayName": "Foreground",
					"description": "The foreground Color.",
					"type":
					{
						"type": "Struct",
						"inner": "Color"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "background",
					"displayName": "Background",
					"description": "The background Color.",
					"type":
					{
						"type": "Struct",
						"inner": "Color"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "auxiliary",
					"displayName": "Auxiliary",
					"description": "The auxiliary Color.",
					"type":
					{
						"type": "Struct",
						"inner": "Color"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "signType",
					"displayName": "Sign Type",
					"description": "The type of sign this prefab fits to.",
					"type":
					{
						"type": "Class",
						"subclass": "SignType"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getTextElements",
					"displayName": "Get Text Elements",
					"description": "Returns all text elements and their values.",
					"parameters": [
						{
							"internalName": "textElements",
							"displayName": "Text Elements",
							"description": "The element names for all text elements.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "String"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "textElementValues",
							"displayName": "Text Element Values",
							"description": "The values for all text elements.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "String"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getIconElements",
					"displayName": "Get Icon Elements",
					"description": "Returns all icon elements and their values.",
					"parameters": [
						{
							"internalName": "iconElements",
							"displayName": "Icon Elements",
							"description": "The element names for all icon elements.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "String"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "iconElementValues",
							"displayName": "Icon Element Values",
							"description": "The values for all icon elements.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Int"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setTextElements",
					"displayName": "Set Text Elements",
					"description": "Sets all text elements and their values.",
					"parameters": [
						{
							"internalName": "textElements",
							"displayName": "Text Elements",
							"description": "The element names for all text elements.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "String"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "textElementValues",
							"displayName": "Text Element Values",
							"description": "The values for all text elements.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "String"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setIconElements",
					"displayName": "Set Icon Elements",
					"description": "Sets all icon elements and their values.",
					"parameters": [
						{
							"internalName": "iconElements",
							"displayName": "Icon Elements",
							"description": "The element names for all icon elements.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "String"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "iconElementValues",
							"displayName": "Icon Element Values",
							"description": "The values for all icon elements.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Int"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setTextElement",
					"displayName": "Set Text Element",
					"description": "Sets a text element with the given element name.",
					"parameters": [
						{
							"internalName": "elementName",
							"displayName": "Element Name",
							"description": "The name of the text element",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "value",
							"displayName": "Value",
							"description": "The value of the text element",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setIconElement",
					"displayName": "Set Icon Element",
					"description": "Sets a icon element with the given element name.",
					"parameters": [
						{
							"internalName": "elementName",
							"displayName": "Element Name",
							"description": "The name of the icon element",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "value",
							"displayName": "Value",
							"description": "The value of the icon element",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getTextElement",
					"displayName": "Get Text Element",
					"description": "Gets a text element with the given element name.",
					"parameters": [
						{
							"internalName": "elementName",
							"displayName": "Element Name",
							"description": "The name of the text element",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "value",
							"displayName": "Value",
							"description": "The value of the text element",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getIconElement",
					"displayName": "Get Icon Element",
					"description": "Gets a icon element with the given element name.",
					"parameters": [
						{
							"internalName": "elementName",
							"displayName": "Element Name",
							"description": "The name of the icon element",
							"type":
							{
								"type": "String"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "value",
							"displayName": "Value",
							"description": "The value of the icon element",
							"type":
							{
								"type": "Int"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			]
		},
		{
			"internalName": "RailroadSignalBlock",
			"displayName": "Railroad Signal Block",
			"description": "A track section that combines the area between multiple signals.",
			"properties": [
				{
					"internalName": "isValid",
					"displayName": "Is Valid",
					"description": "Is true if this signal block reference is valid.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isBlockOccupied",
					"displayName": "Is Block Occupied",
					"description": "True if the block this signal is observing is currently occupied by a vehicle.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "hasBlockReservation",
					"displayName": "Has Block Reservation",
					"description": "True if the block this signal is observing has a reservation of a train e.g. will be passed by a train soon.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isPathBlock",
					"displayName": "Is Path Block",
					"description": "True if the block this signal is observing is a path-block.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "blockValidation",
					"displayName": "Block Validation",
					"description": "Returns the blocks validation status.",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": true,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "isOccupiedBy",
					"displayName": "Is Occupied By",
					"description": "Allows you to check if this block is occupied by a given train.",
					"parameters": [
						{
							"internalName": "train",
							"displayName": "Train",
							"description": "The train you want to check if it occupies this block",
							"type":
							{
								"type": "Object",
								"subclass": "Train"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						},
						{
							"internalName": "isOccupied",
							"displayName": "Is Occupied",
							"description": "True if the given train occupies this block.",
							"type":
							{
								"type": "Bool"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			]
		},
		{
			"internalName": "Rotator",
			"displayName": "Rotator",
			"description": "Contains rotation information about a object in 3D spaces using 3 rotation axis in a gimbal.",
			"properties": [
				{
					"internalName": "pitch",
					"displayName": "Pitch",
					"description": "The pitch component",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "yaw",
					"displayName": "Yaw",
					"description": "The yaw component",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "roll",
					"displayName": "Roll",
					"description": "The roll component",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": []
		},
		{
			"internalName": "TargetPoint",
			"displayName": "Target Point",
			"description": "Target Point in the waypoint list of a wheeled vehicle.",
			"properties": [
				{
					"internalName": "pos",
					"displayName": "Pos",
					"description": "The position of the target point in the world.",
					"type":
					{
						"type": "Struct",
						"inner": "Vector"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "rot",
					"displayName": "Rot",
					"description": "The rotation of the target point in the world.",
					"type":
					{
						"type": "Struct",
						"inner": "Rotator"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "speed",
					"displayName": "Speed",
					"description": "The speed at which the vehicle should pass the target point.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "wait",
					"displayName": "Wait",
					"description": "The amount of time which needs to pass till the vehicle will continue to the next target point.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": []
		},
		{
			"internalName": "TimeTableStop",
			"displayName": "Time Table Stop",
			"description": "Information about a train stop in a time table.",
			"properties": [
				{
					"internalName": "station",
					"displayName": "Station",
					"description": "The station at which the train should stop",
					"type":
					{
						"type": "Trace",
						"subclass": "RailroadStation"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": [
				{
					"internalName": "getRuleSet",
					"displayName": "Get Rule Set",
					"description": "Returns The rule set wich describe when the train will depart from the train station.",
					"parameters": [
						{
							"internalName": "ruleset",
							"displayName": "Rule Set",
							"description": "The rule set of this time table stop.",
							"type":
							{
								"type": "Struct",
								"inner": "TrainDockingRuleSet"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "setRuleSet",
					"displayName": "Set Rule Set",
					"description": "Allows you to change the Rule Set of this time table stop.",
					"parameters": [
						{
							"internalName": "ruleset",
							"displayName": "Rule Set",
							"description": "The rule set you want to use instead.",
							"type":
							{
								"type": "Struct",
								"inner": "TrainDockingRuleSet"
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": false,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			]
		},
		{
			"internalName": "TrackGraph",
			"displayName": "Track Graph",
			"description": "Struct that holds a cache of a whole train/rail network.",
			"properties": [],
			"functions": [
				{
					"internalName": "getTrains",
					"displayName": "Get Trains",
					"description": "Returns a list of all trains in the network.",
					"parameters": [
						{
							"internalName": "trains",
							"displayName": "Trains",
							"description": "The list of trains in the network.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Trace",
									"subclass": "Train"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				},
				{
					"internalName": "getStations",
					"displayName": "Get Stations",
					"description": "Returns a list of all train stations in the network.",
					"parameters": [
						{
							"internalName": "stations",
							"displayName": "Stations",
							"description": "The list of train stations in the network.",
							"type":
							{
								"type": "Array",
								"inner":
								{
									"type": "Trace",
									"subclass": "RailroadStation"
								}
							},
							"Flag_Attrib": false,
							"Flag_ReadOnly": false,
							"Flag_Param": true,
							"Flag_OutParam": true,
							"Flag_RetVal": false,
							"Flag_RT_Sync": true,
							"Flag_RT_Parallel": false,
							"Flag_RT_Async": false,
							"Flag_ClassProp": false
						}
					],
					"Flag_VarArgs": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_MemberFunc": true,
					"Flag_ClassFunc": false,
					"Flag_StaticFunc": false,
					"Flag_VarRets": false
				}
			]
		},
		{
			"internalName": "TrainDockingRuleSet",
			"displayName": "Train Docking Rule Set",
			"description": "Contains information about the rules that describe when a train should depart from a station",
			"properties": [
				{
					"internalName": "definition",
					"displayName": "Definition",
					"description": "0 = Load/Unload Once, 1 = Fully Load/Unload",
					"type":
					{
						"type": "Int"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "duration",
					"displayName": "Duration",
					"description": "The amount of time the train will dock at least.",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "isDurationAndRule",
					"displayName": "Is Duration and Rule",
					"description": "True if the duration of the train stop and the other rules have to be applied.",
					"type":
					{
						"type": "Bool"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "loadFilters",
					"displayName": "Load Filters",
					"description": "The types of items that will be loaded.",
					"type":
					{
						"type": "Array",
						"inner":
						{
							"type": "Class",
							"subclass": "ItemType"
						}
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "unloadFilters",
					"displayName": "Unload Filters",
					"description": "The types of items that will be unloaded.",
					"type":
					{
						"type": "Array",
						"inner":
						{
							"type": "Class",
							"subclass": "ItemType"
						}
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": []
		},
		{
			"internalName": "Vector",
			"displayName": "Vector",
			"description": "Contains three coordinates (X, Y, Z) to describe a position or movement vector in 3D Space",
			"properties": [
				{
					"internalName": "x",
					"displayName": "X",
					"description": "The X coordinate component",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "y",
					"displayName": "Y",
					"description": "The Y coordinate component",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "z",
					"displayName": "Z",
					"description": "The Z coordinate component",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": []
		},
		{
			"internalName": "Vector2D",
			"displayName": "Vector 2D",
			"description": "Contains two coordinates (X, Y) to describe a position or movement vector in 2D Space",
			"properties": [
				{
					"internalName": "x",
					"displayName": "X",
					"description": "The X coordinate component",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				},
				{
					"internalName": "y",
					"displayName": "Y",
					"description": "The Y coordinate component",
					"type":
					{
						"type": "Float"
					},
					"Flag_Attrib": true,
					"Flag_ReadOnly": false,
					"Flag_Param": false,
					"Flag_OutParam": false,
					"Flag_RetVal": false,
					"Flag_RT_Sync": true,
					"Flag_RT_Parallel": true,
					"Flag_RT_Async": false,
					"Flag_ClassProp": false
				}
			],
			"functions": []
		}
	]
}
